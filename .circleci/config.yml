---
version: 2

references:
  docker_golang: &docker_golang
    image: golang:1.16rc1
    environment:
      PGHOST: "127.0.0.1"
      PGUSER: "pgsink_test"
      PGDATABASE: "pgsink_test"
  docker_postgres: &docker_postgres
    image: postgres:13.1
    command: |
      docker-entrypoint.sh postgres -c 'wal_level=logical' -c 'fsync=off'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: "trust"

jobs:
  unit-integration:
    docker:
      - *docker_golang
      - *docker_postgres
    working_directory: /app
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: go get ./...
      - run:
          name: Install ginkgo test runner (using go.mod)
          command: go install github.com/onsi/ginkgo/ginkgo
      - run:
          name: Install Postgres
          command: apt-get update && apt-get install -y postgresql-client libpq-dev
      - run:
          name: Create test database
          command: make recreatedb migrate-run PSQL=$(which psql)
      - run:
          name: Run tests
          command: make test

  check-deps-updated:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run: go mod download
      - run: env GOPROXY=off go build -mod=readonly ./...

  check-deps-tidy:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run: go mod tidy
      - run: |
          if ! git diff --exit-code -- go.mod go.sum; then
            echo "Modules not tidy; please run 'go mod tidy'";
          fi;

  check-generated-code:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run: go install golang.org/x/tools/cmd/goimports
      - run: make generate
      - run: |
          if ! git diff --exit-code --name-only; then
            echo "Generated code not up to date; please run 'make generate'"
            exit 1
          fi

  release:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run:
          name: Release
          command: |
            CURRENT_VERSION="v$(cat VERSION)"
            if [[ $(git tag -l "${CURRENT_VERSION}") == "${CURRENT_VERSION}" ]]; then
              echo "Version ${CURRENT_VERSION} is already released"
              exit 0
            fi
            curl -L -o /tmp/goreleaser_Linux_x86_64.tar.gz https://github.com/goreleaser/goreleaser/releases/download/v0.150.0/goreleaser_Linux_x86_64.tar.gz
            tar zxf /tmp/goreleaser_Linux_x86_64.tar.gz -C /tmp
            git tag "${CURRENT_VERSION}"
            git push --tags
            /tmp/goreleaser --rm-dist

workflows:
  version: 2
  build-integration:
    jobs:
      - unit-integration
      - check-deps-updated
      - check-deps-tidy
      - check-generated-code
      - release:
          requires:
            - unit-integration
          filters:
            branches: {only: master}
