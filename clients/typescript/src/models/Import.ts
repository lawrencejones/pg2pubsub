/* tslint:disable */
/* eslint-disable */
/**
 * pgsink
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Import job for a Postgres table
 * @export
 * @interface Import
 */
export interface Import {
    /**
     * Import was completed at this time
     * @type {Date}
     * @memberof Import
     */
    completedAt?: Date;
    /**
     * Import was created at this time
     * @type {Date}
     * @memberof Import
     */
    createdAt: Date;
    /**
     * Last import error
     * @type {string}
     * @memberof Import
     */
    error?: string;
    /**
     * Count of error attempts
     * @type {number}
     * @memberof Import
     */
    errorCount: number;
    /**
     * Import was expired at this time
     * @type {Date}
     * @memberof Import
     */
    expiredAt?: Date;
    /**
     * Unique ID for the import
     * @type {number}
     * @memberof Import
     */
    id: number;
    /**
     * Timestamp of last error, only reset on error
     * @type {Date}
     * @memberof Import
     */
    lastErrorAt?: Date;
    /**
     * Postgres table schema
     * @type {string}
     * @memberof Import
     */
    schema: string;
    /**
     * Subscription ID, associating this import to a specific subscription
     * @type {string}
     * @memberof Import
     */
    subscriptionId: string;
    /**
     * Postgres table name
     * @type {string}
     * @memberof Import
     */
    tableName: string;
    /**
     * Import was last updated at this time
     * @type {Date}
     * @memberof Import
     */
    updatedAt: Date;
}

export function ImportFromJSON(json: any): Import {
    return ImportFromJSONTyped(json, false);
}

export function ImportFromJSONTyped(json: any, ignoreDiscriminator: boolean): Import {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'completedAt': !exists(json, 'completed_at') ? undefined : (new Date(json['completed_at'])),
        'createdAt': (new Date(json['created_at'])),
        'error': !exists(json, 'error') ? undefined : json['error'],
        'errorCount': json['error_count'],
        'expiredAt': !exists(json, 'expired_at') ? undefined : (new Date(json['expired_at'])),
        'id': json['id'],
        'lastErrorAt': !exists(json, 'last_error_at') ? undefined : (new Date(json['last_error_at'])),
        'schema': json['schema'],
        'subscriptionId': json['subscription_id'],
        'tableName': json['table_name'],
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function ImportToJSON(value?: Import | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'completed_at': value.completedAt === undefined ? undefined : (value.completedAt.toISOString()),
        'created_at': (value.createdAt.toISOString()),
        'error': value.error,
        'error_count': value.errorCount,
        'expired_at': value.expiredAt === undefined ? undefined : (value.expiredAt.toISOString()),
        'id': value.id,
        'last_error_at': value.lastErrorAt === undefined ? undefined : (value.lastErrorAt.toISOString()),
        'schema': value.schema,
        'subscription_id': value.subscriptionId,
        'table_name': value.tableName,
        'updated_at': (value.updatedAt.toISOString()),
    };
}


