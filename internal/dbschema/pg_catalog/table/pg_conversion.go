//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgConversion = newPgConversionTable()

type pgConversionTable struct {
	postgres.Table

	//Columns
	Oid            postgres.ColumnString
	Conname        postgres.ColumnString
	Connamespace   postgres.ColumnString
	Conowner       postgres.ColumnString
	Conforencoding postgres.ColumnInteger
	Contoencoding  postgres.ColumnInteger
	Conproc        postgres.ColumnString
	Condefault     postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgConversionTable struct {
	pgConversionTable

	EXCLUDED pgConversionTable
}

// AS creates new PgConversionTable with assigned alias
func (a *PgConversionTable) AS(alias string) *PgConversionTable {
	aliasTable := newPgConversionTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgConversionTable() *PgConversionTable {
	return &PgConversionTable{
		pgConversionTable: newPgConversionTableImpl("pg_catalog", "pg_conversion"),
		EXCLUDED:          newPgConversionTableImpl("", "excluded"),
	}
}

func newPgConversionTableImpl(schemaName, tableName string) pgConversionTable {
	var (
		OidColumn            = postgres.StringColumn("oid")
		ConnameColumn        = postgres.StringColumn("conname")
		ConnamespaceColumn   = postgres.StringColumn("connamespace")
		ConownerColumn       = postgres.StringColumn("conowner")
		ConforencodingColumn = postgres.IntegerColumn("conforencoding")
		ContoencodingColumn  = postgres.IntegerColumn("contoencoding")
		ConprocColumn        = postgres.StringColumn("conproc")
		CondefaultColumn     = postgres.BoolColumn("condefault")
		allColumns           = postgres.ColumnList{OidColumn, ConnameColumn, ConnamespaceColumn, ConownerColumn, ConforencodingColumn, ContoencodingColumn, ConprocColumn, CondefaultColumn}
		mutableColumns       = postgres.ColumnList{OidColumn, ConnameColumn, ConnamespaceColumn, ConownerColumn, ConforencodingColumn, ContoencodingColumn, ConprocColumn, CondefaultColumn}
	)

	return pgConversionTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Oid:            OidColumn,
		Conname:        ConnameColumn,
		Connamespace:   ConnamespaceColumn,
		Conowner:       ConownerColumn,
		Conforencoding: ConforencodingColumn,
		Contoencoding:  ContoencodingColumn,
		Conproc:        ConprocColumn,
		Condefault:     CondefaultColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
