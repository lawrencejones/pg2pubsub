//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgCollation = newPgCollationTable()

type pgCollationTable struct {
	postgres.Table

	//Columns
	Oid                 postgres.ColumnString
	Collname            postgres.ColumnString
	Collnamespace       postgres.ColumnString
	Collowner           postgres.ColumnString
	Collprovider        postgres.ColumnString
	Collisdeterministic postgres.ColumnBool
	Collencoding        postgres.ColumnInteger
	Collcollate         postgres.ColumnString
	Collctype           postgres.ColumnString
	Collversion         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgCollationTable struct {
	pgCollationTable

	EXCLUDED pgCollationTable
}

// AS creates new PgCollationTable with assigned alias
func (a *PgCollationTable) AS(alias string) *PgCollationTable {
	aliasTable := newPgCollationTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgCollationTable() *PgCollationTable {
	return &PgCollationTable{
		pgCollationTable: newPgCollationTableImpl("pg_catalog", "pg_collation"),
		EXCLUDED:         newPgCollationTableImpl("", "excluded"),
	}
}

func newPgCollationTableImpl(schemaName, tableName string) pgCollationTable {
	var (
		OidColumn                 = postgres.StringColumn("oid")
		CollnameColumn            = postgres.StringColumn("collname")
		CollnamespaceColumn       = postgres.StringColumn("collnamespace")
		CollownerColumn           = postgres.StringColumn("collowner")
		CollproviderColumn        = postgres.StringColumn("collprovider")
		CollisdeterministicColumn = postgres.BoolColumn("collisdeterministic")
		CollencodingColumn        = postgres.IntegerColumn("collencoding")
		CollcollateColumn         = postgres.StringColumn("collcollate")
		CollctypeColumn           = postgres.StringColumn("collctype")
		CollversionColumn         = postgres.StringColumn("collversion")
		allColumns                = postgres.ColumnList{OidColumn, CollnameColumn, CollnamespaceColumn, CollownerColumn, CollproviderColumn, CollisdeterministicColumn, CollencodingColumn, CollcollateColumn, CollctypeColumn, CollversionColumn}
		mutableColumns            = postgres.ColumnList{OidColumn, CollnameColumn, CollnamespaceColumn, CollownerColumn, CollproviderColumn, CollisdeterministicColumn, CollencodingColumn, CollcollateColumn, CollctypeColumn, CollversionColumn}
	)

	return pgCollationTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Oid:                 OidColumn,
		Collname:            CollnameColumn,
		Collnamespace:       CollnamespaceColumn,
		Collowner:           CollownerColumn,
		Collprovider:        CollproviderColumn,
		Collisdeterministic: CollisdeterministicColumn,
		Collencoding:        CollencodingColumn,
		Collcollate:         CollcollateColumn,
		Collctype:           CollctypeColumn,
		Collversion:         CollversionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
