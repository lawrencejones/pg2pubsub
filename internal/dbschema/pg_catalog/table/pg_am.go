//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgAm = newPgAmTable()

type pgAmTable struct {
	postgres.Table

	//Columns
	Oid       postgres.ColumnString
	Amname    postgres.ColumnString
	Amhandler postgres.ColumnString
	Amtype    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgAmTable struct {
	pgAmTable

	EXCLUDED pgAmTable
}

// AS creates new PgAmTable with assigned alias
func (a *PgAmTable) AS(alias string) *PgAmTable {
	aliasTable := newPgAmTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgAmTable() *PgAmTable {
	return &PgAmTable{
		pgAmTable: newPgAmTableImpl("pg_catalog", "pg_am"),
		EXCLUDED:  newPgAmTableImpl("", "excluded"),
	}
}

func newPgAmTableImpl(schemaName, tableName string) pgAmTable {
	var (
		OidColumn       = postgres.StringColumn("oid")
		AmnameColumn    = postgres.StringColumn("amname")
		AmhandlerColumn = postgres.StringColumn("amhandler")
		AmtypeColumn    = postgres.StringColumn("amtype")
		allColumns      = postgres.ColumnList{OidColumn, AmnameColumn, AmhandlerColumn, AmtypeColumn}
		mutableColumns  = postgres.ColumnList{OidColumn, AmnameColumn, AmhandlerColumn, AmtypeColumn}
	)

	return pgAmTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Oid:       OidColumn,
		Amname:    AmnameColumn,
		Amhandler: AmhandlerColumn,
		Amtype:    AmtypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
