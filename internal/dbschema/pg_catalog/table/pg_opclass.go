//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgOpclass = newPgOpclassTable()

type pgOpclassTable struct {
	postgres.Table

	//Columns
	Oid          postgres.ColumnString
	Opcmethod    postgres.ColumnString
	Opcname      postgres.ColumnString
	Opcnamespace postgres.ColumnString
	Opcowner     postgres.ColumnString
	Opcfamily    postgres.ColumnString
	Opcintype    postgres.ColumnString
	Opcdefault   postgres.ColumnBool
	Opckeytype   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgOpclassTable struct {
	pgOpclassTable

	EXCLUDED pgOpclassTable
}

// AS creates new PgOpclassTable with assigned alias
func (a *PgOpclassTable) AS(alias string) *PgOpclassTable {
	aliasTable := newPgOpclassTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgOpclassTable() *PgOpclassTable {
	return &PgOpclassTable{
		pgOpclassTable: newPgOpclassTableImpl("pg_catalog", "pg_opclass"),
		EXCLUDED:       newPgOpclassTableImpl("", "excluded"),
	}
}

func newPgOpclassTableImpl(schemaName, tableName string) pgOpclassTable {
	var (
		OidColumn          = postgres.StringColumn("oid")
		OpcmethodColumn    = postgres.StringColumn("opcmethod")
		OpcnameColumn      = postgres.StringColumn("opcname")
		OpcnamespaceColumn = postgres.StringColumn("opcnamespace")
		OpcownerColumn     = postgres.StringColumn("opcowner")
		OpcfamilyColumn    = postgres.StringColumn("opcfamily")
		OpcintypeColumn    = postgres.StringColumn("opcintype")
		OpcdefaultColumn   = postgres.BoolColumn("opcdefault")
		OpckeytypeColumn   = postgres.StringColumn("opckeytype")
		allColumns         = postgres.ColumnList{OidColumn, OpcmethodColumn, OpcnameColumn, OpcnamespaceColumn, OpcownerColumn, OpcfamilyColumn, OpcintypeColumn, OpcdefaultColumn, OpckeytypeColumn}
		mutableColumns     = postgres.ColumnList{OidColumn, OpcmethodColumn, OpcnameColumn, OpcnamespaceColumn, OpcownerColumn, OpcfamilyColumn, OpcintypeColumn, OpcdefaultColumn, OpckeytypeColumn}
	)

	return pgOpclassTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Oid:          OidColumn,
		Opcmethod:    OpcmethodColumn,
		Opcname:      OpcnameColumn,
		Opcnamespace: OpcnamespaceColumn,
		Opcowner:     OpcownerColumn,
		Opcfamily:    OpcfamilyColumn,
		Opcintype:    OpcintypeColumn,
		Opcdefault:   OpcdefaultColumn,
		Opckeytype:   OpckeytypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
