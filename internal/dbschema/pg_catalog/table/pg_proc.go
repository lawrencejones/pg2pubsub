//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgProc = newPgProcTable()

type pgProcTable struct {
	postgres.Table

	//Columns
	Oid             postgres.ColumnString
	Proname         postgres.ColumnString
	Pronamespace    postgres.ColumnString
	Proowner        postgres.ColumnString
	Prolang         postgres.ColumnString
	Procost         postgres.ColumnFloat
	Prorows         postgres.ColumnFloat
	Provariadic     postgres.ColumnString
	Prosupport      postgres.ColumnString
	Prokind         postgres.ColumnString
	Prosecdef       postgres.ColumnBool
	Proleakproof    postgres.ColumnBool
	Proisstrict     postgres.ColumnBool
	Proretset       postgres.ColumnBool
	Provolatile     postgres.ColumnString
	Proparallel     postgres.ColumnString
	Pronargs        postgres.ColumnInteger
	Pronargdefaults postgres.ColumnInteger
	Prorettype      postgres.ColumnString
	Proargtypes     postgres.ColumnString
	Proallargtypes  postgres.ColumnString
	Proargmodes     postgres.ColumnString
	Proargnames     postgres.ColumnString
	Proargdefaults  postgres.ColumnString
	Protrftypes     postgres.ColumnString
	Prosrc          postgres.ColumnString
	Probin          postgres.ColumnString
	Proconfig       postgres.ColumnString
	Proacl          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgProcTable struct {
	pgProcTable

	EXCLUDED pgProcTable
}

// AS creates new PgProcTable with assigned alias
func (a *PgProcTable) AS(alias string) *PgProcTable {
	aliasTable := newPgProcTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgProcTable() *PgProcTable {
	return &PgProcTable{
		pgProcTable: newPgProcTableImpl("pg_catalog", "pg_proc"),
		EXCLUDED:    newPgProcTableImpl("", "excluded"),
	}
}

func newPgProcTableImpl(schemaName, tableName string) pgProcTable {
	var (
		OidColumn             = postgres.StringColumn("oid")
		PronameColumn         = postgres.StringColumn("proname")
		PronamespaceColumn    = postgres.StringColumn("pronamespace")
		ProownerColumn        = postgres.StringColumn("proowner")
		ProlangColumn         = postgres.StringColumn("prolang")
		ProcostColumn         = postgres.FloatColumn("procost")
		ProrowsColumn         = postgres.FloatColumn("prorows")
		ProvariadicColumn     = postgres.StringColumn("provariadic")
		ProsupportColumn      = postgres.StringColumn("prosupport")
		ProkindColumn         = postgres.StringColumn("prokind")
		ProsecdefColumn       = postgres.BoolColumn("prosecdef")
		ProleakproofColumn    = postgres.BoolColumn("proleakproof")
		ProisstrictColumn     = postgres.BoolColumn("proisstrict")
		ProretsetColumn       = postgres.BoolColumn("proretset")
		ProvolatileColumn     = postgres.StringColumn("provolatile")
		ProparallelColumn     = postgres.StringColumn("proparallel")
		PronargsColumn        = postgres.IntegerColumn("pronargs")
		PronargdefaultsColumn = postgres.IntegerColumn("pronargdefaults")
		ProrettypeColumn      = postgres.StringColumn("prorettype")
		ProargtypesColumn     = postgres.StringColumn("proargtypes")
		ProallargtypesColumn  = postgres.StringColumn("proallargtypes")
		ProargmodesColumn     = postgres.StringColumn("proargmodes")
		ProargnamesColumn     = postgres.StringColumn("proargnames")
		ProargdefaultsColumn  = postgres.StringColumn("proargdefaults")
		ProtrftypesColumn     = postgres.StringColumn("protrftypes")
		ProsrcColumn          = postgres.StringColumn("prosrc")
		ProbinColumn          = postgres.StringColumn("probin")
		ProconfigColumn       = postgres.StringColumn("proconfig")
		ProaclColumn          = postgres.StringColumn("proacl")
		allColumns            = postgres.ColumnList{OidColumn, PronameColumn, PronamespaceColumn, ProownerColumn, ProlangColumn, ProcostColumn, ProrowsColumn, ProvariadicColumn, ProsupportColumn, ProkindColumn, ProsecdefColumn, ProleakproofColumn, ProisstrictColumn, ProretsetColumn, ProvolatileColumn, ProparallelColumn, PronargsColumn, PronargdefaultsColumn, ProrettypeColumn, ProargtypesColumn, ProallargtypesColumn, ProargmodesColumn, ProargnamesColumn, ProargdefaultsColumn, ProtrftypesColumn, ProsrcColumn, ProbinColumn, ProconfigColumn, ProaclColumn}
		mutableColumns        = postgres.ColumnList{OidColumn, PronameColumn, PronamespaceColumn, ProownerColumn, ProlangColumn, ProcostColumn, ProrowsColumn, ProvariadicColumn, ProsupportColumn, ProkindColumn, ProsecdefColumn, ProleakproofColumn, ProisstrictColumn, ProretsetColumn, ProvolatileColumn, ProparallelColumn, PronargsColumn, PronargdefaultsColumn, ProrettypeColumn, ProargtypesColumn, ProallargtypesColumn, ProargmodesColumn, ProargnamesColumn, ProargdefaultsColumn, ProtrftypesColumn, ProsrcColumn, ProbinColumn, ProconfigColumn, ProaclColumn}
	)

	return pgProcTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Oid:             OidColumn,
		Proname:         PronameColumn,
		Pronamespace:    PronamespaceColumn,
		Proowner:        ProownerColumn,
		Prolang:         ProlangColumn,
		Procost:         ProcostColumn,
		Prorows:         ProrowsColumn,
		Provariadic:     ProvariadicColumn,
		Prosupport:      ProsupportColumn,
		Prokind:         ProkindColumn,
		Prosecdef:       ProsecdefColumn,
		Proleakproof:    ProleakproofColumn,
		Proisstrict:     ProisstrictColumn,
		Proretset:       ProretsetColumn,
		Provolatile:     ProvolatileColumn,
		Proparallel:     ProparallelColumn,
		Pronargs:        PronargsColumn,
		Pronargdefaults: PronargdefaultsColumn,
		Prorettype:      ProrettypeColumn,
		Proargtypes:     ProargtypesColumn,
		Proallargtypes:  ProallargtypesColumn,
		Proargmodes:     ProargmodesColumn,
		Proargnames:     ProargnamesColumn,
		Proargdefaults:  ProargdefaultsColumn,
		Protrftypes:     ProtrftypesColumn,
		Prosrc:          ProsrcColumn,
		Probin:          ProbinColumn,
		Proconfig:       ProconfigColumn,
		Proacl:          ProaclColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
