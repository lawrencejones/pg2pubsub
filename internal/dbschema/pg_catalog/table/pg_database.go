//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgDatabase = newPgDatabaseTable()

type pgDatabaseTable struct {
	postgres.Table

	//Columns
	Oid           postgres.ColumnString
	Datname       postgres.ColumnString
	Datdba        postgres.ColumnString
	Encoding      postgres.ColumnInteger
	Datcollate    postgres.ColumnString
	Datctype      postgres.ColumnString
	Datistemplate postgres.ColumnBool
	Datallowconn  postgres.ColumnBool
	Datconnlimit  postgres.ColumnInteger
	Datlastsysoid postgres.ColumnString
	Datfrozenxid  postgres.ColumnString
	Datminmxid    postgres.ColumnString
	Dattablespace postgres.ColumnString
	Datacl        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgDatabaseTable struct {
	pgDatabaseTable

	EXCLUDED pgDatabaseTable
}

// AS creates new PgDatabaseTable with assigned alias
func (a *PgDatabaseTable) AS(alias string) *PgDatabaseTable {
	aliasTable := newPgDatabaseTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgDatabaseTable() *PgDatabaseTable {
	return &PgDatabaseTable{
		pgDatabaseTable: newPgDatabaseTableImpl("pg_catalog", "pg_database"),
		EXCLUDED:        newPgDatabaseTableImpl("", "excluded"),
	}
}

func newPgDatabaseTableImpl(schemaName, tableName string) pgDatabaseTable {
	var (
		OidColumn           = postgres.StringColumn("oid")
		DatnameColumn       = postgres.StringColumn("datname")
		DatdbaColumn        = postgres.StringColumn("datdba")
		EncodingColumn      = postgres.IntegerColumn("encoding")
		DatcollateColumn    = postgres.StringColumn("datcollate")
		DatctypeColumn      = postgres.StringColumn("datctype")
		DatistemplateColumn = postgres.BoolColumn("datistemplate")
		DatallowconnColumn  = postgres.BoolColumn("datallowconn")
		DatconnlimitColumn  = postgres.IntegerColumn("datconnlimit")
		DatlastsysoidColumn = postgres.StringColumn("datlastsysoid")
		DatfrozenxidColumn  = postgres.StringColumn("datfrozenxid")
		DatminmxidColumn    = postgres.StringColumn("datminmxid")
		DattablespaceColumn = postgres.StringColumn("dattablespace")
		DataclColumn        = postgres.StringColumn("datacl")
		allColumns          = postgres.ColumnList{OidColumn, DatnameColumn, DatdbaColumn, EncodingColumn, DatcollateColumn, DatctypeColumn, DatistemplateColumn, DatallowconnColumn, DatconnlimitColumn, DatlastsysoidColumn, DatfrozenxidColumn, DatminmxidColumn, DattablespaceColumn, DataclColumn}
		mutableColumns      = postgres.ColumnList{OidColumn, DatnameColumn, DatdbaColumn, EncodingColumn, DatcollateColumn, DatctypeColumn, DatistemplateColumn, DatallowconnColumn, DatconnlimitColumn, DatlastsysoidColumn, DatfrozenxidColumn, DatminmxidColumn, DattablespaceColumn, DataclColumn}
	)

	return pgDatabaseTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Oid:           OidColumn,
		Datname:       DatnameColumn,
		Datdba:        DatdbaColumn,
		Encoding:      EncodingColumn,
		Datcollate:    DatcollateColumn,
		Datctype:      DatctypeColumn,
		Datistemplate: DatistemplateColumn,
		Datallowconn:  DatallowconnColumn,
		Datconnlimit:  DatconnlimitColumn,
		Datlastsysoid: DatlastsysoidColumn,
		Datfrozenxid:  DatfrozenxidColumn,
		Datminmxid:    DatminmxidColumn,
		Dattablespace: DattablespaceColumn,
		Datacl:        DataclColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
