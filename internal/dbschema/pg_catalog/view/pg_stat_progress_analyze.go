//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatProgressAnalyze = newPgStatProgressAnalyzeTable()

type pgStatProgressAnalyzeTable struct {
	postgres.Table

	//Columns
	Pid                    postgres.ColumnInteger
	Datid                  postgres.ColumnString
	Datname                postgres.ColumnString
	Relid                  postgres.ColumnString
	Phase                  postgres.ColumnString
	SampleBlksTotal        postgres.ColumnInteger
	SampleBlksScanned      postgres.ColumnInteger
	ExtStatsTotal          postgres.ColumnInteger
	ExtStatsComputed       postgres.ColumnInteger
	ChildTablesTotal       postgres.ColumnInteger
	ChildTablesDone        postgres.ColumnInteger
	CurrentChildTableRelid postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatProgressAnalyzeTable struct {
	pgStatProgressAnalyzeTable

	EXCLUDED pgStatProgressAnalyzeTable
}

// AS creates new PgStatProgressAnalyzeTable with assigned alias
func (a *PgStatProgressAnalyzeTable) AS(alias string) *PgStatProgressAnalyzeTable {
	aliasTable := newPgStatProgressAnalyzeTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgStatProgressAnalyzeTable() *PgStatProgressAnalyzeTable {
	return &PgStatProgressAnalyzeTable{
		pgStatProgressAnalyzeTable: newPgStatProgressAnalyzeTableImpl("pg_catalog", "pg_stat_progress_analyze"),
		EXCLUDED:                   newPgStatProgressAnalyzeTableImpl("", "excluded"),
	}
}

func newPgStatProgressAnalyzeTableImpl(schemaName, tableName string) pgStatProgressAnalyzeTable {
	var (
		PidColumn                    = postgres.IntegerColumn("pid")
		DatidColumn                  = postgres.StringColumn("datid")
		DatnameColumn                = postgres.StringColumn("datname")
		RelidColumn                  = postgres.StringColumn("relid")
		PhaseColumn                  = postgres.StringColumn("phase")
		SampleBlksTotalColumn        = postgres.IntegerColumn("sample_blks_total")
		SampleBlksScannedColumn      = postgres.IntegerColumn("sample_blks_scanned")
		ExtStatsTotalColumn          = postgres.IntegerColumn("ext_stats_total")
		ExtStatsComputedColumn       = postgres.IntegerColumn("ext_stats_computed")
		ChildTablesTotalColumn       = postgres.IntegerColumn("child_tables_total")
		ChildTablesDoneColumn        = postgres.IntegerColumn("child_tables_done")
		CurrentChildTableRelidColumn = postgres.StringColumn("current_child_table_relid")
		allColumns                   = postgres.ColumnList{PidColumn, DatidColumn, DatnameColumn, RelidColumn, PhaseColumn, SampleBlksTotalColumn, SampleBlksScannedColumn, ExtStatsTotalColumn, ExtStatsComputedColumn, ChildTablesTotalColumn, ChildTablesDoneColumn, CurrentChildTableRelidColumn}
		mutableColumns               = postgres.ColumnList{PidColumn, DatidColumn, DatnameColumn, RelidColumn, PhaseColumn, SampleBlksTotalColumn, SampleBlksScannedColumn, ExtStatsTotalColumn, ExtStatsComputedColumn, ChildTablesTotalColumn, ChildTablesDoneColumn, CurrentChildTableRelidColumn}
	)

	return pgStatProgressAnalyzeTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Pid:                    PidColumn,
		Datid:                  DatidColumn,
		Datname:                DatnameColumn,
		Relid:                  RelidColumn,
		Phase:                  PhaseColumn,
		SampleBlksTotal:        SampleBlksTotalColumn,
		SampleBlksScanned:      SampleBlksScannedColumn,
		ExtStatsTotal:          ExtStatsTotalColumn,
		ExtStatsComputed:       ExtStatsComputedColumn,
		ChildTablesTotal:       ChildTablesTotalColumn,
		ChildTablesDone:        ChildTablesDoneColumn,
		CurrentChildTableRelid: CurrentChildTableRelidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
