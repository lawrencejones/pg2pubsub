//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgSequences = newPgSequencesTable()

type pgSequencesTable struct {
	postgres.Table

	//Columns
	Schemaname    postgres.ColumnString
	Sequencename  postgres.ColumnString
	Sequenceowner postgres.ColumnString
	DataType      postgres.ColumnString
	StartValue    postgres.ColumnInteger
	MinValue      postgres.ColumnInteger
	MaxValue      postgres.ColumnInteger
	IncrementBy   postgres.ColumnInteger
	Cycle         postgres.ColumnBool
	CacheSize     postgres.ColumnInteger
	LastValue     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgSequencesTable struct {
	pgSequencesTable

	EXCLUDED pgSequencesTable
}

// AS creates new PgSequencesTable with assigned alias
func (a *PgSequencesTable) AS(alias string) *PgSequencesTable {
	aliasTable := newPgSequencesTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgSequencesTable() *PgSequencesTable {
	return &PgSequencesTable{
		pgSequencesTable: newPgSequencesTableImpl("pg_catalog", "pg_sequences"),
		EXCLUDED:         newPgSequencesTableImpl("", "excluded"),
	}
}

func newPgSequencesTableImpl(schemaName, tableName string) pgSequencesTable {
	var (
		SchemanameColumn    = postgres.StringColumn("schemaname")
		SequencenameColumn  = postgres.StringColumn("sequencename")
		SequenceownerColumn = postgres.StringColumn("sequenceowner")
		DataTypeColumn      = postgres.StringColumn("data_type")
		StartValueColumn    = postgres.IntegerColumn("start_value")
		MinValueColumn      = postgres.IntegerColumn("min_value")
		MaxValueColumn      = postgres.IntegerColumn("max_value")
		IncrementByColumn   = postgres.IntegerColumn("increment_by")
		CycleColumn         = postgres.BoolColumn("cycle")
		CacheSizeColumn     = postgres.IntegerColumn("cache_size")
		LastValueColumn     = postgres.IntegerColumn("last_value")
		allColumns          = postgres.ColumnList{SchemanameColumn, SequencenameColumn, SequenceownerColumn, DataTypeColumn, StartValueColumn, MinValueColumn, MaxValueColumn, IncrementByColumn, CycleColumn, CacheSizeColumn, LastValueColumn}
		mutableColumns      = postgres.ColumnList{SchemanameColumn, SequencenameColumn, SequenceownerColumn, DataTypeColumn, StartValueColumn, MinValueColumn, MaxValueColumn, IncrementByColumn, CycleColumn, CacheSizeColumn, LastValueColumn}
	)

	return pgSequencesTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Schemaname:    SchemanameColumn,
		Sequencename:  SequencenameColumn,
		Sequenceowner: SequenceownerColumn,
		DataType:      DataTypeColumn,
		StartValue:    StartValueColumn,
		MinValue:      MinValueColumn,
		MaxValue:      MaxValueColumn,
		IncrementBy:   IncrementByColumn,
		Cycle:         CycleColumn,
		CacheSize:     CacheSizeColumn,
		LastValue:     LastValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
