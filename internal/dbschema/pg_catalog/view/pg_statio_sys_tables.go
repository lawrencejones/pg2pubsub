//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatioSysTables = newPgStatioSysTablesTable()

type pgStatioSysTablesTable struct {
	postgres.Table

	//Columns
	Relid         postgres.ColumnString
	Schemaname    postgres.ColumnString
	Relname       postgres.ColumnString
	HeapBlksRead  postgres.ColumnInteger
	HeapBlksHit   postgres.ColumnInteger
	IdxBlksRead   postgres.ColumnInteger
	IdxBlksHit    postgres.ColumnInteger
	ToastBlksRead postgres.ColumnInteger
	ToastBlksHit  postgres.ColumnInteger
	TidxBlksRead  postgres.ColumnInteger
	TidxBlksHit   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatioSysTablesTable struct {
	pgStatioSysTablesTable

	EXCLUDED pgStatioSysTablesTable
}

// AS creates new PgStatioSysTablesTable with assigned alias
func (a *PgStatioSysTablesTable) AS(alias string) *PgStatioSysTablesTable {
	aliasTable := newPgStatioSysTablesTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgStatioSysTablesTable() *PgStatioSysTablesTable {
	return &PgStatioSysTablesTable{
		pgStatioSysTablesTable: newPgStatioSysTablesTableImpl("pg_catalog", "pg_statio_sys_tables"),
		EXCLUDED:               newPgStatioSysTablesTableImpl("", "excluded"),
	}
}

func newPgStatioSysTablesTableImpl(schemaName, tableName string) pgStatioSysTablesTable {
	var (
		RelidColumn         = postgres.StringColumn("relid")
		SchemanameColumn    = postgres.StringColumn("schemaname")
		RelnameColumn       = postgres.StringColumn("relname")
		HeapBlksReadColumn  = postgres.IntegerColumn("heap_blks_read")
		HeapBlksHitColumn   = postgres.IntegerColumn("heap_blks_hit")
		IdxBlksReadColumn   = postgres.IntegerColumn("idx_blks_read")
		IdxBlksHitColumn    = postgres.IntegerColumn("idx_blks_hit")
		ToastBlksReadColumn = postgres.IntegerColumn("toast_blks_read")
		ToastBlksHitColumn  = postgres.IntegerColumn("toast_blks_hit")
		TidxBlksReadColumn  = postgres.IntegerColumn("tidx_blks_read")
		TidxBlksHitColumn   = postgres.IntegerColumn("tidx_blks_hit")
		allColumns          = postgres.ColumnList{RelidColumn, SchemanameColumn, RelnameColumn, HeapBlksReadColumn, HeapBlksHitColumn, IdxBlksReadColumn, IdxBlksHitColumn, ToastBlksReadColumn, ToastBlksHitColumn, TidxBlksReadColumn, TidxBlksHitColumn}
		mutableColumns      = postgres.ColumnList{RelidColumn, SchemanameColumn, RelnameColumn, HeapBlksReadColumn, HeapBlksHitColumn, IdxBlksReadColumn, IdxBlksHitColumn, ToastBlksReadColumn, ToastBlksHitColumn, TidxBlksReadColumn, TidxBlksHitColumn}
	)

	return pgStatioSysTablesTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Relid:         RelidColumn,
		Schemaname:    SchemanameColumn,
		Relname:       RelnameColumn,
		HeapBlksRead:  HeapBlksReadColumn,
		HeapBlksHit:   HeapBlksHitColumn,
		IdxBlksRead:   IdxBlksReadColumn,
		IdxBlksHit:    IdxBlksHitColumn,
		ToastBlksRead: ToastBlksReadColumn,
		ToastBlksHit:  ToastBlksHitColumn,
		TidxBlksRead:  TidxBlksReadColumn,
		TidxBlksHit:   TidxBlksHitColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
