//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatReplication = newPgStatReplicationTable()

type pgStatReplicationTable struct {
	postgres.Table

	//Columns
	Pid             postgres.ColumnInteger
	Usesysid        postgres.ColumnString
	Usename         postgres.ColumnString
	ApplicationName postgres.ColumnString
	ClientAddr      postgres.ColumnString
	ClientHostname  postgres.ColumnString
	ClientPort      postgres.ColumnInteger
	BackendStart    postgres.ColumnTimestampz
	BackendXmin     postgres.ColumnString
	State           postgres.ColumnString
	SentLsn         postgres.ColumnString
	WriteLsn        postgres.ColumnString
	FlushLsn        postgres.ColumnString
	ReplayLsn       postgres.ColumnString
	WriteLag        postgres.ColumnInterval
	FlushLag        postgres.ColumnInterval
	ReplayLag       postgres.ColumnInterval
	SyncPriority    postgres.ColumnInteger
	SyncState       postgres.ColumnString
	ReplyTime       postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatReplicationTable struct {
	pgStatReplicationTable

	EXCLUDED pgStatReplicationTable
}

// AS creates new PgStatReplicationTable with assigned alias
func (a *PgStatReplicationTable) AS(alias string) *PgStatReplicationTable {
	aliasTable := newPgStatReplicationTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgStatReplicationTable() *PgStatReplicationTable {
	return &PgStatReplicationTable{
		pgStatReplicationTable: newPgStatReplicationTableImpl("pg_catalog", "pg_stat_replication"),
		EXCLUDED:               newPgStatReplicationTableImpl("", "excluded"),
	}
}

func newPgStatReplicationTableImpl(schemaName, tableName string) pgStatReplicationTable {
	var (
		PidColumn             = postgres.IntegerColumn("pid")
		UsesysidColumn        = postgres.StringColumn("usesysid")
		UsenameColumn         = postgres.StringColumn("usename")
		ApplicationNameColumn = postgres.StringColumn("application_name")
		ClientAddrColumn      = postgres.StringColumn("client_addr")
		ClientHostnameColumn  = postgres.StringColumn("client_hostname")
		ClientPortColumn      = postgres.IntegerColumn("client_port")
		BackendStartColumn    = postgres.TimestampzColumn("backend_start")
		BackendXminColumn     = postgres.StringColumn("backend_xmin")
		StateColumn           = postgres.StringColumn("state")
		SentLsnColumn         = postgres.StringColumn("sent_lsn")
		WriteLsnColumn        = postgres.StringColumn("write_lsn")
		FlushLsnColumn        = postgres.StringColumn("flush_lsn")
		ReplayLsnColumn       = postgres.StringColumn("replay_lsn")
		WriteLagColumn        = postgres.IntervalColumn("write_lag")
		FlushLagColumn        = postgres.IntervalColumn("flush_lag")
		ReplayLagColumn       = postgres.IntervalColumn("replay_lag")
		SyncPriorityColumn    = postgres.IntegerColumn("sync_priority")
		SyncStateColumn       = postgres.StringColumn("sync_state")
		ReplyTimeColumn       = postgres.TimestampzColumn("reply_time")
		allColumns            = postgres.ColumnList{PidColumn, UsesysidColumn, UsenameColumn, ApplicationNameColumn, ClientAddrColumn, ClientHostnameColumn, ClientPortColumn, BackendStartColumn, BackendXminColumn, StateColumn, SentLsnColumn, WriteLsnColumn, FlushLsnColumn, ReplayLsnColumn, WriteLagColumn, FlushLagColumn, ReplayLagColumn, SyncPriorityColumn, SyncStateColumn, ReplyTimeColumn}
		mutableColumns        = postgres.ColumnList{PidColumn, UsesysidColumn, UsenameColumn, ApplicationNameColumn, ClientAddrColumn, ClientHostnameColumn, ClientPortColumn, BackendStartColumn, BackendXminColumn, StateColumn, SentLsnColumn, WriteLsnColumn, FlushLsnColumn, ReplayLsnColumn, WriteLagColumn, FlushLagColumn, ReplayLagColumn, SyncPriorityColumn, SyncStateColumn, ReplyTimeColumn}
	)

	return pgStatReplicationTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Pid:             PidColumn,
		Usesysid:        UsesysidColumn,
		Usename:         UsenameColumn,
		ApplicationName: ApplicationNameColumn,
		ClientAddr:      ClientAddrColumn,
		ClientHostname:  ClientHostnameColumn,
		ClientPort:      ClientPortColumn,
		BackendStart:    BackendStartColumn,
		BackendXmin:     BackendXminColumn,
		State:           StateColumn,
		SentLsn:         SentLsnColumn,
		WriteLsn:        WriteLsnColumn,
		FlushLsn:        FlushLsnColumn,
		ReplayLsn:       ReplayLsnColumn,
		WriteLag:        WriteLagColumn,
		FlushLag:        FlushLagColumn,
		ReplayLag:       ReplayLagColumn,
		SyncPriority:    SyncPriorityColumn,
		SyncState:       SyncStateColumn,
		ReplyTime:       ReplyTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
