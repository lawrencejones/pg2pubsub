//
// Code generated by go-jet DO NOT EDIT.
// Generated at Tuesday, 12-May-20 07:59:32 BST
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/postgres"
)

var PgStatDatabase = newPgStatDatabaseTable()

type PgStatDatabaseTable struct {
	postgres.Table

	//Columns
	Datid               postgres.ColumnString
	Datname             postgres.ColumnString
	Numbackends         postgres.ColumnInteger
	XactCommit          postgres.ColumnInteger
	XactRollback        postgres.ColumnInteger
	BlksRead            postgres.ColumnInteger
	BlksHit             postgres.ColumnInteger
	TupReturned         postgres.ColumnInteger
	TupFetched          postgres.ColumnInteger
	TupInserted         postgres.ColumnInteger
	TupUpdated          postgres.ColumnInteger
	TupDeleted          postgres.ColumnInteger
	Conflicts           postgres.ColumnInteger
	TempFiles           postgres.ColumnInteger
	TempBytes           postgres.ColumnInteger
	Deadlocks           postgres.ColumnInteger
	ChecksumFailures    postgres.ColumnInteger
	ChecksumLastFailure postgres.ColumnTimestampz
	BlkReadTime         postgres.ColumnFloat
	BlkWriteTime        postgres.ColumnFloat
	StatsReset          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

// creates new PgStatDatabaseTable with assigned alias
func (a *PgStatDatabaseTable) AS(alias string) *PgStatDatabaseTable {
	aliasTable := newPgStatDatabaseTable()

	aliasTable.Table.AS(alias)

	return aliasTable
}

func newPgStatDatabaseTable() *PgStatDatabaseTable {
	var (
		DatidColumn               = postgres.StringColumn("datid")
		DatnameColumn             = postgres.StringColumn("datname")
		NumbackendsColumn         = postgres.IntegerColumn("numbackends")
		XactCommitColumn          = postgres.IntegerColumn("xact_commit")
		XactRollbackColumn        = postgres.IntegerColumn("xact_rollback")
		BlksReadColumn            = postgres.IntegerColumn("blks_read")
		BlksHitColumn             = postgres.IntegerColumn("blks_hit")
		TupReturnedColumn         = postgres.IntegerColumn("tup_returned")
		TupFetchedColumn          = postgres.IntegerColumn("tup_fetched")
		TupInsertedColumn         = postgres.IntegerColumn("tup_inserted")
		TupUpdatedColumn          = postgres.IntegerColumn("tup_updated")
		TupDeletedColumn          = postgres.IntegerColumn("tup_deleted")
		ConflictsColumn           = postgres.IntegerColumn("conflicts")
		TempFilesColumn           = postgres.IntegerColumn("temp_files")
		TempBytesColumn           = postgres.IntegerColumn("temp_bytes")
		DeadlocksColumn           = postgres.IntegerColumn("deadlocks")
		ChecksumFailuresColumn    = postgres.IntegerColumn("checksum_failures")
		ChecksumLastFailureColumn = postgres.TimestampzColumn("checksum_last_failure")
		BlkReadTimeColumn         = postgres.FloatColumn("blk_read_time")
		BlkWriteTimeColumn        = postgres.FloatColumn("blk_write_time")
		StatsResetColumn          = postgres.TimestampzColumn("stats_reset")
	)

	return &PgStatDatabaseTable{
		Table: postgres.NewTable("pg_catalog", "pg_stat_database", DatidColumn, DatnameColumn, NumbackendsColumn, XactCommitColumn, XactRollbackColumn, BlksReadColumn, BlksHitColumn, TupReturnedColumn, TupFetchedColumn, TupInsertedColumn, TupUpdatedColumn, TupDeletedColumn, ConflictsColumn, TempFilesColumn, TempBytesColumn, DeadlocksColumn, ChecksumFailuresColumn, ChecksumLastFailureColumn, BlkReadTimeColumn, BlkWriteTimeColumn, StatsResetColumn),

		//Columns
		Datid:               DatidColumn,
		Datname:             DatnameColumn,
		Numbackends:         NumbackendsColumn,
		XactCommit:          XactCommitColumn,
		XactRollback:        XactRollbackColumn,
		BlksRead:            BlksReadColumn,
		BlksHit:             BlksHitColumn,
		TupReturned:         TupReturnedColumn,
		TupFetched:          TupFetchedColumn,
		TupInserted:         TupInsertedColumn,
		TupUpdated:          TupUpdatedColumn,
		TupDeleted:          TupDeletedColumn,
		Conflicts:           ConflictsColumn,
		TempFiles:           TempFilesColumn,
		TempBytes:           TempBytesColumn,
		Deadlocks:           DeadlocksColumn,
		ChecksumFailures:    ChecksumFailuresColumn,
		ChecksumLastFailure: ChecksumLastFailureColumn,
		BlkReadTime:         BlkReadTimeColumn,
		BlkWriteTime:        BlkWriteTimeColumn,
		StatsReset:          StatsResetColumn,

		AllColumns:     postgres.ColumnList{DatidColumn, DatnameColumn, NumbackendsColumn, XactCommitColumn, XactRollbackColumn, BlksReadColumn, BlksHitColumn, TupReturnedColumn, TupFetchedColumn, TupInsertedColumn, TupUpdatedColumn, TupDeletedColumn, ConflictsColumn, TempFilesColumn, TempBytesColumn, DeadlocksColumn, ChecksumFailuresColumn, ChecksumLastFailureColumn, BlkReadTimeColumn, BlkWriteTimeColumn, StatsResetColumn},
		MutableColumns: postgres.ColumnList{DatidColumn, DatnameColumn, NumbackendsColumn, XactCommitColumn, XactRollbackColumn, BlksReadColumn, BlksHitColumn, TupReturnedColumn, TupFetchedColumn, TupInsertedColumn, TupUpdatedColumn, TupDeletedColumn, ConflictsColumn, TempFilesColumn, TempBytesColumn, DeadlocksColumn, ChecksumFailuresColumn, ChecksumLastFailureColumn, BlkReadTimeColumn, BlkWriteTimeColumn, StatsResetColumn},
	}
}
