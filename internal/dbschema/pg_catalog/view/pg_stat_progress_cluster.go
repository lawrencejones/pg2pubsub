//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatProgressCluster = newPgStatProgressClusterTable()

type pgStatProgressClusterTable struct {
	postgres.Table

	//Columns
	Pid               postgres.ColumnInteger
	Datid             postgres.ColumnString
	Datname           postgres.ColumnString
	Relid             postgres.ColumnString
	Command           postgres.ColumnString
	Phase             postgres.ColumnString
	ClusterIndexRelid postgres.ColumnString
	HeapTuplesScanned postgres.ColumnInteger
	HeapTuplesWritten postgres.ColumnInteger
	HeapBlksTotal     postgres.ColumnInteger
	HeapBlksScanned   postgres.ColumnInteger
	IndexRebuildCount postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatProgressClusterTable struct {
	pgStatProgressClusterTable

	EXCLUDED pgStatProgressClusterTable
}

// AS creates new PgStatProgressClusterTable with assigned alias
func (a *PgStatProgressClusterTable) AS(alias string) *PgStatProgressClusterTable {
	aliasTable := newPgStatProgressClusterTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgStatProgressClusterTable() *PgStatProgressClusterTable {
	return &PgStatProgressClusterTable{
		pgStatProgressClusterTable: newPgStatProgressClusterTableImpl("pg_catalog", "pg_stat_progress_cluster"),
		EXCLUDED:                   newPgStatProgressClusterTableImpl("", "excluded"),
	}
}

func newPgStatProgressClusterTableImpl(schemaName, tableName string) pgStatProgressClusterTable {
	var (
		PidColumn               = postgres.IntegerColumn("pid")
		DatidColumn             = postgres.StringColumn("datid")
		DatnameColumn           = postgres.StringColumn("datname")
		RelidColumn             = postgres.StringColumn("relid")
		CommandColumn           = postgres.StringColumn("command")
		PhaseColumn             = postgres.StringColumn("phase")
		ClusterIndexRelidColumn = postgres.StringColumn("cluster_index_relid")
		HeapTuplesScannedColumn = postgres.IntegerColumn("heap_tuples_scanned")
		HeapTuplesWrittenColumn = postgres.IntegerColumn("heap_tuples_written")
		HeapBlksTotalColumn     = postgres.IntegerColumn("heap_blks_total")
		HeapBlksScannedColumn   = postgres.IntegerColumn("heap_blks_scanned")
		IndexRebuildCountColumn = postgres.IntegerColumn("index_rebuild_count")
		allColumns              = postgres.ColumnList{PidColumn, DatidColumn, DatnameColumn, RelidColumn, CommandColumn, PhaseColumn, ClusterIndexRelidColumn, HeapTuplesScannedColumn, HeapTuplesWrittenColumn, HeapBlksTotalColumn, HeapBlksScannedColumn, IndexRebuildCountColumn}
		mutableColumns          = postgres.ColumnList{PidColumn, DatidColumn, DatnameColumn, RelidColumn, CommandColumn, PhaseColumn, ClusterIndexRelidColumn, HeapTuplesScannedColumn, HeapTuplesWrittenColumn, HeapBlksTotalColumn, HeapBlksScannedColumn, IndexRebuildCountColumn}
	)

	return pgStatProgressClusterTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Pid:               PidColumn,
		Datid:             DatidColumn,
		Datname:           DatnameColumn,
		Relid:             RelidColumn,
		Command:           CommandColumn,
		Phase:             PhaseColumn,
		ClusterIndexRelid: ClusterIndexRelidColumn,
		HeapTuplesScanned: HeapTuplesScannedColumn,
		HeapTuplesWritten: HeapTuplesWrittenColumn,
		HeapBlksTotal:     HeapBlksTotalColumn,
		HeapBlksScanned:   HeapBlksScannedColumn,
		IndexRebuildCount: IndexRebuildCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
