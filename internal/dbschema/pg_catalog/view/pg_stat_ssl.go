//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatSsl = newPgStatSslTable()

type pgStatSslTable struct {
	postgres.Table

	//Columns
	Pid          postgres.ColumnInteger
	Ssl          postgres.ColumnBool
	Version      postgres.ColumnString
	Cipher       postgres.ColumnString
	Bits         postgres.ColumnInteger
	Compression  postgres.ColumnBool
	ClientDn     postgres.ColumnString
	ClientSerial postgres.ColumnFloat
	IssuerDn     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatSslTable struct {
	pgStatSslTable

	EXCLUDED pgStatSslTable
}

// AS creates new PgStatSslTable with assigned alias
func (a *PgStatSslTable) AS(alias string) *PgStatSslTable {
	aliasTable := newPgStatSslTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgStatSslTable() *PgStatSslTable {
	return &PgStatSslTable{
		pgStatSslTable: newPgStatSslTableImpl("pg_catalog", "pg_stat_ssl"),
		EXCLUDED:       newPgStatSslTableImpl("", "excluded"),
	}
}

func newPgStatSslTableImpl(schemaName, tableName string) pgStatSslTable {
	var (
		PidColumn          = postgres.IntegerColumn("pid")
		SslColumn          = postgres.BoolColumn("ssl")
		VersionColumn      = postgres.StringColumn("version")
		CipherColumn       = postgres.StringColumn("cipher")
		BitsColumn         = postgres.IntegerColumn("bits")
		CompressionColumn  = postgres.BoolColumn("compression")
		ClientDnColumn     = postgres.StringColumn("client_dn")
		ClientSerialColumn = postgres.FloatColumn("client_serial")
		IssuerDnColumn     = postgres.StringColumn("issuer_dn")
		allColumns         = postgres.ColumnList{PidColumn, SslColumn, VersionColumn, CipherColumn, BitsColumn, CompressionColumn, ClientDnColumn, ClientSerialColumn, IssuerDnColumn}
		mutableColumns     = postgres.ColumnList{PidColumn, SslColumn, VersionColumn, CipherColumn, BitsColumn, CompressionColumn, ClientDnColumn, ClientSerialColumn, IssuerDnColumn}
	)

	return pgStatSslTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Pid:          PidColumn,
		Ssl:          SslColumn,
		Version:      VersionColumn,
		Cipher:       CipherColumn,
		Bits:         BitsColumn,
		Compression:  CompressionColumn,
		ClientDn:     ClientDnColumn,
		ClientSerial: ClientSerialColumn,
		IssuerDn:     IssuerDnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
