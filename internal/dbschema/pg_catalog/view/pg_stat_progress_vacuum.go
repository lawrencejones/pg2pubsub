//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatProgressVacuum = newPgStatProgressVacuumTable()

type pgStatProgressVacuumTable struct {
	postgres.Table

	//Columns
	Pid              postgres.ColumnInteger
	Datid            postgres.ColumnString
	Datname          postgres.ColumnString
	Relid            postgres.ColumnString
	Phase            postgres.ColumnString
	HeapBlksTotal    postgres.ColumnInteger
	HeapBlksScanned  postgres.ColumnInteger
	HeapBlksVacuumed postgres.ColumnInteger
	IndexVacuumCount postgres.ColumnInteger
	MaxDeadTuples    postgres.ColumnInteger
	NumDeadTuples    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatProgressVacuumTable struct {
	pgStatProgressVacuumTable

	EXCLUDED pgStatProgressVacuumTable
}

// AS creates new PgStatProgressVacuumTable with assigned alias
func (a *PgStatProgressVacuumTable) AS(alias string) *PgStatProgressVacuumTable {
	aliasTable := newPgStatProgressVacuumTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgStatProgressVacuumTable() *PgStatProgressVacuumTable {
	return &PgStatProgressVacuumTable{
		pgStatProgressVacuumTable: newPgStatProgressVacuumTableImpl("pg_catalog", "pg_stat_progress_vacuum"),
		EXCLUDED:                  newPgStatProgressVacuumTableImpl("", "excluded"),
	}
}

func newPgStatProgressVacuumTableImpl(schemaName, tableName string) pgStatProgressVacuumTable {
	var (
		PidColumn              = postgres.IntegerColumn("pid")
		DatidColumn            = postgres.StringColumn("datid")
		DatnameColumn          = postgres.StringColumn("datname")
		RelidColumn            = postgres.StringColumn("relid")
		PhaseColumn            = postgres.StringColumn("phase")
		HeapBlksTotalColumn    = postgres.IntegerColumn("heap_blks_total")
		HeapBlksScannedColumn  = postgres.IntegerColumn("heap_blks_scanned")
		HeapBlksVacuumedColumn = postgres.IntegerColumn("heap_blks_vacuumed")
		IndexVacuumCountColumn = postgres.IntegerColumn("index_vacuum_count")
		MaxDeadTuplesColumn    = postgres.IntegerColumn("max_dead_tuples")
		NumDeadTuplesColumn    = postgres.IntegerColumn("num_dead_tuples")
		allColumns             = postgres.ColumnList{PidColumn, DatidColumn, DatnameColumn, RelidColumn, PhaseColumn, HeapBlksTotalColumn, HeapBlksScannedColumn, HeapBlksVacuumedColumn, IndexVacuumCountColumn, MaxDeadTuplesColumn, NumDeadTuplesColumn}
		mutableColumns         = postgres.ColumnList{PidColumn, DatidColumn, DatnameColumn, RelidColumn, PhaseColumn, HeapBlksTotalColumn, HeapBlksScannedColumn, HeapBlksVacuumedColumn, IndexVacuumCountColumn, MaxDeadTuplesColumn, NumDeadTuplesColumn}
	)

	return pgStatProgressVacuumTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Pid:              PidColumn,
		Datid:            DatidColumn,
		Datname:          DatnameColumn,
		Relid:            RelidColumn,
		Phase:            PhaseColumn,
		HeapBlksTotal:    HeapBlksTotalColumn,
		HeapBlksScanned:  HeapBlksScannedColumn,
		HeapBlksVacuumed: HeapBlksVacuumedColumn,
		IndexVacuumCount: IndexVacuumCountColumn,
		MaxDeadTuples:    MaxDeadTuplesColumn,
		NumDeadTuples:    NumDeadTuplesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
