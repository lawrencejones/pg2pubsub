//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgLocks = newPgLocksTable()

type pgLocksTable struct {
	postgres.Table

	//Columns
	Locktype           postgres.ColumnString
	Database           postgres.ColumnString
	Relation           postgres.ColumnString
	Page               postgres.ColumnInteger
	Tuple              postgres.ColumnInteger
	Virtualxid         postgres.ColumnString
	Transactionid      postgres.ColumnString
	Classid            postgres.ColumnString
	Objid              postgres.ColumnString
	Objsubid           postgres.ColumnInteger
	Virtualtransaction postgres.ColumnString
	Pid                postgres.ColumnInteger
	Mode               postgres.ColumnString
	Granted            postgres.ColumnBool
	Fastpath           postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgLocksTable struct {
	pgLocksTable

	EXCLUDED pgLocksTable
}

// AS creates new PgLocksTable with assigned alias
func (a *PgLocksTable) AS(alias string) *PgLocksTable {
	aliasTable := newPgLocksTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgLocksTable() *PgLocksTable {
	return &PgLocksTable{
		pgLocksTable: newPgLocksTableImpl("pg_catalog", "pg_locks"),
		EXCLUDED:     newPgLocksTableImpl("", "excluded"),
	}
}

func newPgLocksTableImpl(schemaName, tableName string) pgLocksTable {
	var (
		LocktypeColumn           = postgres.StringColumn("locktype")
		DatabaseColumn           = postgres.StringColumn("database")
		RelationColumn           = postgres.StringColumn("relation")
		PageColumn               = postgres.IntegerColumn("page")
		TupleColumn              = postgres.IntegerColumn("tuple")
		VirtualxidColumn         = postgres.StringColumn("virtualxid")
		TransactionidColumn      = postgres.StringColumn("transactionid")
		ClassidColumn            = postgres.StringColumn("classid")
		ObjidColumn              = postgres.StringColumn("objid")
		ObjsubidColumn           = postgres.IntegerColumn("objsubid")
		VirtualtransactionColumn = postgres.StringColumn("virtualtransaction")
		PidColumn                = postgres.IntegerColumn("pid")
		ModeColumn               = postgres.StringColumn("mode")
		GrantedColumn            = postgres.BoolColumn("granted")
		FastpathColumn           = postgres.BoolColumn("fastpath")
		allColumns               = postgres.ColumnList{LocktypeColumn, DatabaseColumn, RelationColumn, PageColumn, TupleColumn, VirtualxidColumn, TransactionidColumn, ClassidColumn, ObjidColumn, ObjsubidColumn, VirtualtransactionColumn, PidColumn, ModeColumn, GrantedColumn, FastpathColumn}
		mutableColumns           = postgres.ColumnList{LocktypeColumn, DatabaseColumn, RelationColumn, PageColumn, TupleColumn, VirtualxidColumn, TransactionidColumn, ClassidColumn, ObjidColumn, ObjsubidColumn, VirtualtransactionColumn, PidColumn, ModeColumn, GrantedColumn, FastpathColumn}
	)

	return pgLocksTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Locktype:           LocktypeColumn,
		Database:           DatabaseColumn,
		Relation:           RelationColumn,
		Page:               PageColumn,
		Tuple:              TupleColumn,
		Virtualxid:         VirtualxidColumn,
		Transactionid:      TransactionidColumn,
		Classid:            ClassidColumn,
		Objid:              ObjidColumn,
		Objsubid:           ObjsubidColumn,
		Virtualtransaction: VirtualtransactionColumn,
		Pid:                PidColumn,
		Mode:               ModeColumn,
		Granted:            GrantedColumn,
		Fastpath:           FastpathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
