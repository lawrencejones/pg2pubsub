//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgViews = newPgViewsTable()

type pgViewsTable struct {
	postgres.Table

	//Columns
	Schemaname postgres.ColumnString
	Viewname   postgres.ColumnString
	Viewowner  postgres.ColumnString
	Definition postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgViewsTable struct {
	pgViewsTable

	EXCLUDED pgViewsTable
}

// AS creates new PgViewsTable with assigned alias
func (a *PgViewsTable) AS(alias string) *PgViewsTable {
	aliasTable := newPgViewsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgViewsTable() *PgViewsTable {
	return &PgViewsTable{
		pgViewsTable: newPgViewsTableImpl("pg_catalog", "pg_views"),
		EXCLUDED:     newPgViewsTableImpl("", "excluded"),
	}
}

func newPgViewsTableImpl(schemaName, tableName string) pgViewsTable {
	var (
		SchemanameColumn = postgres.StringColumn("schemaname")
		ViewnameColumn   = postgres.StringColumn("viewname")
		ViewownerColumn  = postgres.StringColumn("viewowner")
		DefinitionColumn = postgres.StringColumn("definition")
		allColumns       = postgres.ColumnList{SchemanameColumn, ViewnameColumn, ViewownerColumn, DefinitionColumn}
		mutableColumns   = postgres.ColumnList{SchemanameColumn, ViewnameColumn, ViewownerColumn, DefinitionColumn}
	)

	return pgViewsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Schemaname: SchemanameColumn,
		Viewname:   ViewnameColumn,
		Viewowner:  ViewownerColumn,
		Definition: DefinitionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
