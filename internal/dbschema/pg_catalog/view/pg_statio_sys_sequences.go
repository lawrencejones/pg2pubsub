//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatioSysSequences = newPgStatioSysSequencesTable()

type pgStatioSysSequencesTable struct {
	postgres.Table

	//Columns
	Relid      postgres.ColumnString
	Schemaname postgres.ColumnString
	Relname    postgres.ColumnString
	BlksRead   postgres.ColumnInteger
	BlksHit    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatioSysSequencesTable struct {
	pgStatioSysSequencesTable

	EXCLUDED pgStatioSysSequencesTable
}

// AS creates new PgStatioSysSequencesTable with assigned alias
func (a *PgStatioSysSequencesTable) AS(alias string) *PgStatioSysSequencesTable {
	aliasTable := newPgStatioSysSequencesTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPgStatioSysSequencesTable() *PgStatioSysSequencesTable {
	return &PgStatioSysSequencesTable{
		pgStatioSysSequencesTable: newPgStatioSysSequencesTableImpl("pg_catalog", "pg_statio_sys_sequences"),
		EXCLUDED:                  newPgStatioSysSequencesTableImpl("", "excluded"),
	}
}

func newPgStatioSysSequencesTableImpl(schemaName, tableName string) pgStatioSysSequencesTable {
	var (
		RelidColumn      = postgres.StringColumn("relid")
		SchemanameColumn = postgres.StringColumn("schemaname")
		RelnameColumn    = postgres.StringColumn("relname")
		BlksReadColumn   = postgres.IntegerColumn("blks_read")
		BlksHitColumn    = postgres.IntegerColumn("blks_hit")
		allColumns       = postgres.ColumnList{RelidColumn, SchemanameColumn, RelnameColumn, BlksReadColumn, BlksHitColumn}
		mutableColumns   = postgres.ColumnList{RelidColumn, SchemanameColumn, RelnameColumn, BlksReadColumn, BlksHitColumn}
	)

	return pgStatioSysSequencesTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Relid:      RelidColumn,
		Schemaname: SchemanameColumn,
		Relname:    RelnameColumn,
		BlksRead:   BlksReadColumn,
		BlksHit:    BlksHitColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
