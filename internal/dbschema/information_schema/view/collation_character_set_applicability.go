//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CollationCharacterSetApplicability = newCollationCharacterSetApplicabilityTable()

type collationCharacterSetApplicabilityTable struct {
	postgres.Table

	//Columns
	CollationCatalog    postgres.ColumnString
	CollationSchema     postgres.ColumnString
	CollationName       postgres.ColumnString
	CharacterSetCatalog postgres.ColumnString
	CharacterSetSchema  postgres.ColumnString
	CharacterSetName    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollationCharacterSetApplicabilityTable struct {
	collationCharacterSetApplicabilityTable

	EXCLUDED collationCharacterSetApplicabilityTable
}

// AS creates new CollationCharacterSetApplicabilityTable with assigned alias
func (a *CollationCharacterSetApplicabilityTable) AS(alias string) *CollationCharacterSetApplicabilityTable {
	aliasTable := newCollationCharacterSetApplicabilityTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newCollationCharacterSetApplicabilityTable() *CollationCharacterSetApplicabilityTable {
	return &CollationCharacterSetApplicabilityTable{
		collationCharacterSetApplicabilityTable: newCollationCharacterSetApplicabilityTableImpl("information_schema", "collation_character_set_applicability"),
		EXCLUDED:                                newCollationCharacterSetApplicabilityTableImpl("", "excluded"),
	}
}

func newCollationCharacterSetApplicabilityTableImpl(schemaName, tableName string) collationCharacterSetApplicabilityTable {
	var (
		CollationCatalogColumn    = postgres.StringColumn("collation_catalog")
		CollationSchemaColumn     = postgres.StringColumn("collation_schema")
		CollationNameColumn       = postgres.StringColumn("collation_name")
		CharacterSetCatalogColumn = postgres.StringColumn("character_set_catalog")
		CharacterSetSchemaColumn  = postgres.StringColumn("character_set_schema")
		CharacterSetNameColumn    = postgres.StringColumn("character_set_name")
		allColumns                = postgres.ColumnList{CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, CharacterSetCatalogColumn, CharacterSetSchemaColumn, CharacterSetNameColumn}
		mutableColumns            = postgres.ColumnList{CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, CharacterSetCatalogColumn, CharacterSetSchemaColumn, CharacterSetNameColumn}
	)

	return collationCharacterSetApplicabilityTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		CollationCatalog:    CollationCatalogColumn,
		CollationSchema:     CollationSchemaColumn,
		CollationName:       CollationNameColumn,
		CharacterSetCatalog: CharacterSetCatalogColumn,
		CharacterSetSchema:  CharacterSetSchemaColumn,
		CharacterSetName:    CharacterSetNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
