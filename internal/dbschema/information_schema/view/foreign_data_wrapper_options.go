//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ForeignDataWrapperOptions = newForeignDataWrapperOptionsTable()

type foreignDataWrapperOptionsTable struct {
	postgres.Table

	//Columns
	ForeignDataWrapperCatalog postgres.ColumnString
	ForeignDataWrapperName    postgres.ColumnString
	OptionName                postgres.ColumnString
	OptionValue               postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ForeignDataWrapperOptionsTable struct {
	foreignDataWrapperOptionsTable

	EXCLUDED foreignDataWrapperOptionsTable
}

// AS creates new ForeignDataWrapperOptionsTable with assigned alias
func (a *ForeignDataWrapperOptionsTable) AS(alias string) *ForeignDataWrapperOptionsTable {
	aliasTable := newForeignDataWrapperOptionsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newForeignDataWrapperOptionsTable() *ForeignDataWrapperOptionsTable {
	return &ForeignDataWrapperOptionsTable{
		foreignDataWrapperOptionsTable: newForeignDataWrapperOptionsTableImpl("information_schema", "foreign_data_wrapper_options"),
		EXCLUDED:                       newForeignDataWrapperOptionsTableImpl("", "excluded"),
	}
}

func newForeignDataWrapperOptionsTableImpl(schemaName, tableName string) foreignDataWrapperOptionsTable {
	var (
		ForeignDataWrapperCatalogColumn = postgres.StringColumn("foreign_data_wrapper_catalog")
		ForeignDataWrapperNameColumn    = postgres.StringColumn("foreign_data_wrapper_name")
		OptionNameColumn                = postgres.StringColumn("option_name")
		OptionValueColumn               = postgres.StringColumn("option_value")
		allColumns                      = postgres.ColumnList{ForeignDataWrapperCatalogColumn, ForeignDataWrapperNameColumn, OptionNameColumn, OptionValueColumn}
		mutableColumns                  = postgres.ColumnList{ForeignDataWrapperCatalogColumn, ForeignDataWrapperNameColumn, OptionNameColumn, OptionValueColumn}
	)

	return foreignDataWrapperOptionsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ForeignDataWrapperCatalog: ForeignDataWrapperCatalogColumn,
		ForeignDataWrapperName:    ForeignDataWrapperNameColumn,
		OptionName:                OptionNameColumn,
		OptionValue:               OptionValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
