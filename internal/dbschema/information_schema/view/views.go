//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Views = newViewsTable()

type viewsTable struct {
	postgres.Table

	//Columns
	TableCatalog            postgres.ColumnString
	TableSchema             postgres.ColumnString
	TableName               postgres.ColumnString
	ViewDefinition          postgres.ColumnString
	CheckOption             postgres.ColumnString
	IsUpdatable             postgres.ColumnString
	IsInsertableInto        postgres.ColumnString
	IsTriggerUpdatable      postgres.ColumnString
	IsTriggerDeletable      postgres.ColumnString
	IsTriggerInsertableInto postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ViewsTable struct {
	viewsTable

	EXCLUDED viewsTable
}

// AS creates new ViewsTable with assigned alias
func (a *ViewsTable) AS(alias string) *ViewsTable {
	aliasTable := newViewsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newViewsTable() *ViewsTable {
	return &ViewsTable{
		viewsTable: newViewsTableImpl("information_schema", "views"),
		EXCLUDED:   newViewsTableImpl("", "excluded"),
	}
}

func newViewsTableImpl(schemaName, tableName string) viewsTable {
	var (
		TableCatalogColumn            = postgres.StringColumn("table_catalog")
		TableSchemaColumn             = postgres.StringColumn("table_schema")
		TableNameColumn               = postgres.StringColumn("table_name")
		ViewDefinitionColumn          = postgres.StringColumn("view_definition")
		CheckOptionColumn             = postgres.StringColumn("check_option")
		IsUpdatableColumn             = postgres.StringColumn("is_updatable")
		IsInsertableIntoColumn        = postgres.StringColumn("is_insertable_into")
		IsTriggerUpdatableColumn      = postgres.StringColumn("is_trigger_updatable")
		IsTriggerDeletableColumn      = postgres.StringColumn("is_trigger_deletable")
		IsTriggerInsertableIntoColumn = postgres.StringColumn("is_trigger_insertable_into")
		allColumns                    = postgres.ColumnList{TableCatalogColumn, TableSchemaColumn, TableNameColumn, ViewDefinitionColumn, CheckOptionColumn, IsUpdatableColumn, IsInsertableIntoColumn, IsTriggerUpdatableColumn, IsTriggerDeletableColumn, IsTriggerInsertableIntoColumn}
		mutableColumns                = postgres.ColumnList{TableCatalogColumn, TableSchemaColumn, TableNameColumn, ViewDefinitionColumn, CheckOptionColumn, IsUpdatableColumn, IsInsertableIntoColumn, IsTriggerUpdatableColumn, IsTriggerDeletableColumn, IsTriggerInsertableIntoColumn}
	)

	return viewsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		TableCatalog:            TableCatalogColumn,
		TableSchema:             TableSchemaColumn,
		TableName:               TableNameColumn,
		ViewDefinition:          ViewDefinitionColumn,
		CheckOption:             CheckOptionColumn,
		IsUpdatable:             IsUpdatableColumn,
		IsInsertableInto:        IsInsertableIntoColumn,
		IsTriggerUpdatable:      IsTriggerUpdatableColumn,
		IsTriggerDeletable:      IsTriggerDeletableColumn,
		IsTriggerInsertableInto: IsTriggerInsertableIntoColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
