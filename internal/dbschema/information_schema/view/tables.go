//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tables = newTablesTable()

type tablesTable struct {
	postgres.Table

	//Columns
	TableCatalog              postgres.ColumnString
	TableSchema               postgres.ColumnString
	TableName                 postgres.ColumnString
	TableType                 postgres.ColumnString
	SelfReferencingColumnName postgres.ColumnString
	ReferenceGeneration       postgres.ColumnString
	UserDefinedTypeCatalog    postgres.ColumnString
	UserDefinedTypeSchema     postgres.ColumnString
	UserDefinedTypeName       postgres.ColumnString
	IsInsertableInto          postgres.ColumnString
	IsTyped                   postgres.ColumnString
	CommitAction              postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TablesTable struct {
	tablesTable

	EXCLUDED tablesTable
}

// AS creates new TablesTable with assigned alias
func (a *TablesTable) AS(alias string) *TablesTable {
	aliasTable := newTablesTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newTablesTable() *TablesTable {
	return &TablesTable{
		tablesTable: newTablesTableImpl("information_schema", "tables"),
		EXCLUDED:    newTablesTableImpl("", "excluded"),
	}
}

func newTablesTableImpl(schemaName, tableName string) tablesTable {
	var (
		TableCatalogColumn              = postgres.StringColumn("table_catalog")
		TableSchemaColumn               = postgres.StringColumn("table_schema")
		TableNameColumn                 = postgres.StringColumn("table_name")
		TableTypeColumn                 = postgres.StringColumn("table_type")
		SelfReferencingColumnNameColumn = postgres.StringColumn("self_referencing_column_name")
		ReferenceGenerationColumn       = postgres.StringColumn("reference_generation")
		UserDefinedTypeCatalogColumn    = postgres.StringColumn("user_defined_type_catalog")
		UserDefinedTypeSchemaColumn     = postgres.StringColumn("user_defined_type_schema")
		UserDefinedTypeNameColumn       = postgres.StringColumn("user_defined_type_name")
		IsInsertableIntoColumn          = postgres.StringColumn("is_insertable_into")
		IsTypedColumn                   = postgres.StringColumn("is_typed")
		CommitActionColumn              = postgres.StringColumn("commit_action")
		allColumns                      = postgres.ColumnList{TableCatalogColumn, TableSchemaColumn, TableNameColumn, TableTypeColumn, SelfReferencingColumnNameColumn, ReferenceGenerationColumn, UserDefinedTypeCatalogColumn, UserDefinedTypeSchemaColumn, UserDefinedTypeNameColumn, IsInsertableIntoColumn, IsTypedColumn, CommitActionColumn}
		mutableColumns                  = postgres.ColumnList{TableCatalogColumn, TableSchemaColumn, TableNameColumn, TableTypeColumn, SelfReferencingColumnNameColumn, ReferenceGenerationColumn, UserDefinedTypeCatalogColumn, UserDefinedTypeSchemaColumn, UserDefinedTypeNameColumn, IsInsertableIntoColumn, IsTypedColumn, CommitActionColumn}
	)

	return tablesTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		TableCatalog:              TableCatalogColumn,
		TableSchema:               TableSchemaColumn,
		TableName:                 TableNameColumn,
		TableType:                 TableTypeColumn,
		SelfReferencingColumnName: SelfReferencingColumnNameColumn,
		ReferenceGeneration:       ReferenceGenerationColumn,
		UserDefinedTypeCatalog:    UserDefinedTypeCatalogColumn,
		UserDefinedTypeSchema:     UserDefinedTypeSchemaColumn,
		UserDefinedTypeName:       UserDefinedTypeNameColumn,
		IsInsertableInto:          IsInsertableIntoColumn,
		IsTyped:                   IsTypedColumn,
		CommitAction:              CommitActionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
