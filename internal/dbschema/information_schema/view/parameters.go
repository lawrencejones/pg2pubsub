//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Parameters = newParametersTable()

type parametersTable struct {
	postgres.Table

	//Columns
	SpecificCatalog        postgres.ColumnString
	SpecificSchema         postgres.ColumnString
	SpecificName           postgres.ColumnString
	OrdinalPosition        postgres.ColumnInteger
	ParameterMode          postgres.ColumnString
	IsResult               postgres.ColumnString
	AsLocator              postgres.ColumnString
	ParameterName          postgres.ColumnString
	DataType               postgres.ColumnString
	CharacterMaximumLength postgres.ColumnInteger
	CharacterOctetLength   postgres.ColumnInteger
	CharacterSetCatalog    postgres.ColumnString
	CharacterSetSchema     postgres.ColumnString
	CharacterSetName       postgres.ColumnString
	CollationCatalog       postgres.ColumnString
	CollationSchema        postgres.ColumnString
	CollationName          postgres.ColumnString
	NumericPrecision       postgres.ColumnInteger
	NumericPrecisionRadix  postgres.ColumnInteger
	NumericScale           postgres.ColumnInteger
	DatetimePrecision      postgres.ColumnInteger
	IntervalType           postgres.ColumnString
	IntervalPrecision      postgres.ColumnInteger
	UdtCatalog             postgres.ColumnString
	UdtSchema              postgres.ColumnString
	UdtName                postgres.ColumnString
	ScopeCatalog           postgres.ColumnString
	ScopeSchema            postgres.ColumnString
	ScopeName              postgres.ColumnString
	MaximumCardinality     postgres.ColumnInteger
	DtdIdentifier          postgres.ColumnString
	ParameterDefault       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ParametersTable struct {
	parametersTable

	EXCLUDED parametersTable
}

// AS creates new ParametersTable with assigned alias
func (a *ParametersTable) AS(alias string) *ParametersTable {
	aliasTable := newParametersTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newParametersTable() *ParametersTable {
	return &ParametersTable{
		parametersTable: newParametersTableImpl("information_schema", "parameters"),
		EXCLUDED:        newParametersTableImpl("", "excluded"),
	}
}

func newParametersTableImpl(schemaName, tableName string) parametersTable {
	var (
		SpecificCatalogColumn        = postgres.StringColumn("specific_catalog")
		SpecificSchemaColumn         = postgres.StringColumn("specific_schema")
		SpecificNameColumn           = postgres.StringColumn("specific_name")
		OrdinalPositionColumn        = postgres.IntegerColumn("ordinal_position")
		ParameterModeColumn          = postgres.StringColumn("parameter_mode")
		IsResultColumn               = postgres.StringColumn("is_result")
		AsLocatorColumn              = postgres.StringColumn("as_locator")
		ParameterNameColumn          = postgres.StringColumn("parameter_name")
		DataTypeColumn               = postgres.StringColumn("data_type")
		CharacterMaximumLengthColumn = postgres.IntegerColumn("character_maximum_length")
		CharacterOctetLengthColumn   = postgres.IntegerColumn("character_octet_length")
		CharacterSetCatalogColumn    = postgres.StringColumn("character_set_catalog")
		CharacterSetSchemaColumn     = postgres.StringColumn("character_set_schema")
		CharacterSetNameColumn       = postgres.StringColumn("character_set_name")
		CollationCatalogColumn       = postgres.StringColumn("collation_catalog")
		CollationSchemaColumn        = postgres.StringColumn("collation_schema")
		CollationNameColumn          = postgres.StringColumn("collation_name")
		NumericPrecisionColumn       = postgres.IntegerColumn("numeric_precision")
		NumericPrecisionRadixColumn  = postgres.IntegerColumn("numeric_precision_radix")
		NumericScaleColumn           = postgres.IntegerColumn("numeric_scale")
		DatetimePrecisionColumn      = postgres.IntegerColumn("datetime_precision")
		IntervalTypeColumn           = postgres.StringColumn("interval_type")
		IntervalPrecisionColumn      = postgres.IntegerColumn("interval_precision")
		UdtCatalogColumn             = postgres.StringColumn("udt_catalog")
		UdtSchemaColumn              = postgres.StringColumn("udt_schema")
		UdtNameColumn                = postgres.StringColumn("udt_name")
		ScopeCatalogColumn           = postgres.StringColumn("scope_catalog")
		ScopeSchemaColumn            = postgres.StringColumn("scope_schema")
		ScopeNameColumn              = postgres.StringColumn("scope_name")
		MaximumCardinalityColumn     = postgres.IntegerColumn("maximum_cardinality")
		DtdIdentifierColumn          = postgres.StringColumn("dtd_identifier")
		ParameterDefaultColumn       = postgres.StringColumn("parameter_default")
		allColumns                   = postgres.ColumnList{SpecificCatalogColumn, SpecificSchemaColumn, SpecificNameColumn, OrdinalPositionColumn, ParameterModeColumn, IsResultColumn, AsLocatorColumn, ParameterNameColumn, DataTypeColumn, CharacterMaximumLengthColumn, CharacterOctetLengthColumn, CharacterSetCatalogColumn, CharacterSetSchemaColumn, CharacterSetNameColumn, CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, NumericPrecisionColumn, NumericPrecisionRadixColumn, NumericScaleColumn, DatetimePrecisionColumn, IntervalTypeColumn, IntervalPrecisionColumn, UdtCatalogColumn, UdtSchemaColumn, UdtNameColumn, ScopeCatalogColumn, ScopeSchemaColumn, ScopeNameColumn, MaximumCardinalityColumn, DtdIdentifierColumn, ParameterDefaultColumn}
		mutableColumns               = postgres.ColumnList{SpecificCatalogColumn, SpecificSchemaColumn, SpecificNameColumn, OrdinalPositionColumn, ParameterModeColumn, IsResultColumn, AsLocatorColumn, ParameterNameColumn, DataTypeColumn, CharacterMaximumLengthColumn, CharacterOctetLengthColumn, CharacterSetCatalogColumn, CharacterSetSchemaColumn, CharacterSetNameColumn, CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, NumericPrecisionColumn, NumericPrecisionRadixColumn, NumericScaleColumn, DatetimePrecisionColumn, IntervalTypeColumn, IntervalPrecisionColumn, UdtCatalogColumn, UdtSchemaColumn, UdtNameColumn, ScopeCatalogColumn, ScopeSchemaColumn, ScopeNameColumn, MaximumCardinalityColumn, DtdIdentifierColumn, ParameterDefaultColumn}
	)

	return parametersTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		SpecificCatalog:        SpecificCatalogColumn,
		SpecificSchema:         SpecificSchemaColumn,
		SpecificName:           SpecificNameColumn,
		OrdinalPosition:        OrdinalPositionColumn,
		ParameterMode:          ParameterModeColumn,
		IsResult:               IsResultColumn,
		AsLocator:              AsLocatorColumn,
		ParameterName:          ParameterNameColumn,
		DataType:               DataTypeColumn,
		CharacterMaximumLength: CharacterMaximumLengthColumn,
		CharacterOctetLength:   CharacterOctetLengthColumn,
		CharacterSetCatalog:    CharacterSetCatalogColumn,
		CharacterSetSchema:     CharacterSetSchemaColumn,
		CharacterSetName:       CharacterSetNameColumn,
		CollationCatalog:       CollationCatalogColumn,
		CollationSchema:        CollationSchemaColumn,
		CollationName:          CollationNameColumn,
		NumericPrecision:       NumericPrecisionColumn,
		NumericPrecisionRadix:  NumericPrecisionRadixColumn,
		NumericScale:           NumericScaleColumn,
		DatetimePrecision:      DatetimePrecisionColumn,
		IntervalType:           IntervalTypeColumn,
		IntervalPrecision:      IntervalPrecisionColumn,
		UdtCatalog:             UdtCatalogColumn,
		UdtSchema:              UdtSchemaColumn,
		UdtName:                UdtNameColumn,
		ScopeCatalog:           ScopeCatalogColumn,
		ScopeSchema:            ScopeSchemaColumn,
		ScopeName:              ScopeNameColumn,
		MaximumCardinality:     MaximumCardinalityColumn,
		DtdIdentifier:          DtdIdentifierColumn,
		ParameterDefault:       ParameterDefaultColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
