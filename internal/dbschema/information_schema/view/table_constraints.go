//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TableConstraints = newTableConstraintsTable()

type tableConstraintsTable struct {
	postgres.Table

	//Columns
	ConstraintCatalog postgres.ColumnString
	ConstraintSchema  postgres.ColumnString
	ConstraintName    postgres.ColumnString
	TableCatalog      postgres.ColumnString
	TableSchema       postgres.ColumnString
	TableName         postgres.ColumnString
	ConstraintType    postgres.ColumnString
	IsDeferrable      postgres.ColumnString
	InitiallyDeferred postgres.ColumnString
	Enforced          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TableConstraintsTable struct {
	tableConstraintsTable

	EXCLUDED tableConstraintsTable
}

// AS creates new TableConstraintsTable with assigned alias
func (a *TableConstraintsTable) AS(alias string) *TableConstraintsTable {
	aliasTable := newTableConstraintsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newTableConstraintsTable() *TableConstraintsTable {
	return &TableConstraintsTable{
		tableConstraintsTable: newTableConstraintsTableImpl("information_schema", "table_constraints"),
		EXCLUDED:              newTableConstraintsTableImpl("", "excluded"),
	}
}

func newTableConstraintsTableImpl(schemaName, tableName string) tableConstraintsTable {
	var (
		ConstraintCatalogColumn = postgres.StringColumn("constraint_catalog")
		ConstraintSchemaColumn  = postgres.StringColumn("constraint_schema")
		ConstraintNameColumn    = postgres.StringColumn("constraint_name")
		TableCatalogColumn      = postgres.StringColumn("table_catalog")
		TableSchemaColumn       = postgres.StringColumn("table_schema")
		TableNameColumn         = postgres.StringColumn("table_name")
		ConstraintTypeColumn    = postgres.StringColumn("constraint_type")
		IsDeferrableColumn      = postgres.StringColumn("is_deferrable")
		InitiallyDeferredColumn = postgres.StringColumn("initially_deferred")
		EnforcedColumn          = postgres.StringColumn("enforced")
		allColumns              = postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, TableCatalogColumn, TableSchemaColumn, TableNameColumn, ConstraintTypeColumn, IsDeferrableColumn, InitiallyDeferredColumn, EnforcedColumn}
		mutableColumns          = postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, TableCatalogColumn, TableSchemaColumn, TableNameColumn, ConstraintTypeColumn, IsDeferrableColumn, InitiallyDeferredColumn, EnforcedColumn}
	)

	return tableConstraintsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ConstraintCatalog: ConstraintCatalogColumn,
		ConstraintSchema:  ConstraintSchemaColumn,
		ConstraintName:    ConstraintNameColumn,
		TableCatalog:      TableCatalogColumn,
		TableSchema:       TableSchemaColumn,
		TableName:         TableNameColumn,
		ConstraintType:    ConstraintTypeColumn,
		IsDeferrable:      IsDeferrableColumn,
		InitiallyDeferred: InitiallyDeferredColumn,
		Enforced:          EnforcedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
