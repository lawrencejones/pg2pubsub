//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ViewColumnUsage = newViewColumnUsageTable()

type viewColumnUsageTable struct {
	postgres.Table

	//Columns
	ViewCatalog  postgres.ColumnString
	ViewSchema   postgres.ColumnString
	ViewName     postgres.ColumnString
	TableCatalog postgres.ColumnString
	TableSchema  postgres.ColumnString
	TableName    postgres.ColumnString
	ColumnName   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ViewColumnUsageTable struct {
	viewColumnUsageTable

	EXCLUDED viewColumnUsageTable
}

// AS creates new ViewColumnUsageTable with assigned alias
func (a *ViewColumnUsageTable) AS(alias string) *ViewColumnUsageTable {
	aliasTable := newViewColumnUsageTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newViewColumnUsageTable() *ViewColumnUsageTable {
	return &ViewColumnUsageTable{
		viewColumnUsageTable: newViewColumnUsageTableImpl("information_schema", "view_column_usage"),
		EXCLUDED:             newViewColumnUsageTableImpl("", "excluded"),
	}
}

func newViewColumnUsageTableImpl(schemaName, tableName string) viewColumnUsageTable {
	var (
		ViewCatalogColumn  = postgres.StringColumn("view_catalog")
		ViewSchemaColumn   = postgres.StringColumn("view_schema")
		ViewNameColumn     = postgres.StringColumn("view_name")
		TableCatalogColumn = postgres.StringColumn("table_catalog")
		TableSchemaColumn  = postgres.StringColumn("table_schema")
		TableNameColumn    = postgres.StringColumn("table_name")
		ColumnNameColumn   = postgres.StringColumn("column_name")
		allColumns         = postgres.ColumnList{ViewCatalogColumn, ViewSchemaColumn, ViewNameColumn, TableCatalogColumn, TableSchemaColumn, TableNameColumn, ColumnNameColumn}
		mutableColumns     = postgres.ColumnList{ViewCatalogColumn, ViewSchemaColumn, ViewNameColumn, TableCatalogColumn, TableSchemaColumn, TableNameColumn, ColumnNameColumn}
	)

	return viewColumnUsageTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ViewCatalog:  ViewCatalogColumn,
		ViewSchema:   ViewSchemaColumn,
		ViewName:     ViewNameColumn,
		TableCatalog: TableCatalogColumn,
		TableSchema:  TableSchemaColumn,
		TableName:    TableNameColumn,
		ColumnName:   ColumnNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
