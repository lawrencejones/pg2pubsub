//
// Code generated by go-jet DO NOT EDIT.
// Generated at Tuesday, 12-May-20 09:15:06 BST
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/postgres"
)

var KeyColumnUsage = newKeyColumnUsageTable()

type KeyColumnUsageTable struct {
	postgres.Table

	//Columns
	ConstraintCatalog          postgres.ColumnString
	ConstraintSchema           postgres.ColumnString
	ConstraintName             postgres.ColumnString
	TableCatalog               postgres.ColumnString
	TableSchema                postgres.ColumnString
	TableName                  postgres.ColumnString
	ColumnName                 postgres.ColumnString
	OrdinalPosition            postgres.ColumnInteger
	PositionInUniqueConstraint postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

// creates new KeyColumnUsageTable with assigned alias
func (a *KeyColumnUsageTable) AS(alias string) *KeyColumnUsageTable {
	aliasTable := newKeyColumnUsageTable()

	aliasTable.Table.AS(alias)

	return aliasTable
}

func newKeyColumnUsageTable() *KeyColumnUsageTable {
	var (
		ConstraintCatalogColumn          = postgres.StringColumn("constraint_catalog")
		ConstraintSchemaColumn           = postgres.StringColumn("constraint_schema")
		ConstraintNameColumn             = postgres.StringColumn("constraint_name")
		TableCatalogColumn               = postgres.StringColumn("table_catalog")
		TableSchemaColumn                = postgres.StringColumn("table_schema")
		TableNameColumn                  = postgres.StringColumn("table_name")
		ColumnNameColumn                 = postgres.StringColumn("column_name")
		OrdinalPositionColumn            = postgres.IntegerColumn("ordinal_position")
		PositionInUniqueConstraintColumn = postgres.IntegerColumn("position_in_unique_constraint")
	)

	return &KeyColumnUsageTable{
		Table: postgres.NewTable("information_schema", "key_column_usage", ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, TableCatalogColumn, TableSchemaColumn, TableNameColumn, ColumnNameColumn, OrdinalPositionColumn, PositionInUniqueConstraintColumn),

		//Columns
		ConstraintCatalog:          ConstraintCatalogColumn,
		ConstraintSchema:           ConstraintSchemaColumn,
		ConstraintName:             ConstraintNameColumn,
		TableCatalog:               TableCatalogColumn,
		TableSchema:                TableSchemaColumn,
		TableName:                  TableNameColumn,
		ColumnName:                 ColumnNameColumn,
		OrdinalPosition:            OrdinalPositionColumn,
		PositionInUniqueConstraint: PositionInUniqueConstraintColumn,

		AllColumns:     postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, TableCatalogColumn, TableSchemaColumn, TableNameColumn, ColumnNameColumn, OrdinalPositionColumn, PositionInUniqueConstraintColumn},
		MutableColumns: postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, TableCatalogColumn, TableSchemaColumn, TableNameColumn, ColumnNameColumn, OrdinalPositionColumn, PositionInUniqueConstraintColumn},
	}
}
