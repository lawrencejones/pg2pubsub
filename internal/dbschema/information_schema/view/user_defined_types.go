//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserDefinedTypes = newUserDefinedTypesTable()

type userDefinedTypesTable struct {
	postgres.Table

	//Columns
	UserDefinedTypeCatalog  postgres.ColumnString
	UserDefinedTypeSchema   postgres.ColumnString
	UserDefinedTypeName     postgres.ColumnString
	UserDefinedTypeCategory postgres.ColumnString
	IsInstantiable          postgres.ColumnString
	IsFinal                 postgres.ColumnString
	OrderingForm            postgres.ColumnString
	OrderingCategory        postgres.ColumnString
	OrderingRoutineCatalog  postgres.ColumnString
	OrderingRoutineSchema   postgres.ColumnString
	OrderingRoutineName     postgres.ColumnString
	ReferenceType           postgres.ColumnString
	DataType                postgres.ColumnString
	CharacterMaximumLength  postgres.ColumnInteger
	CharacterOctetLength    postgres.ColumnInteger
	CharacterSetCatalog     postgres.ColumnString
	CharacterSetSchema      postgres.ColumnString
	CharacterSetName        postgres.ColumnString
	CollationCatalog        postgres.ColumnString
	CollationSchema         postgres.ColumnString
	CollationName           postgres.ColumnString
	NumericPrecision        postgres.ColumnInteger
	NumericPrecisionRadix   postgres.ColumnInteger
	NumericScale            postgres.ColumnInteger
	DatetimePrecision       postgres.ColumnInteger
	IntervalType            postgres.ColumnString
	IntervalPrecision       postgres.ColumnInteger
	SourceDtdIdentifier     postgres.ColumnString
	RefDtdIdentifier        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserDefinedTypesTable struct {
	userDefinedTypesTable

	EXCLUDED userDefinedTypesTable
}

// AS creates new UserDefinedTypesTable with assigned alias
func (a *UserDefinedTypesTable) AS(alias string) *UserDefinedTypesTable {
	aliasTable := newUserDefinedTypesTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newUserDefinedTypesTable() *UserDefinedTypesTable {
	return &UserDefinedTypesTable{
		userDefinedTypesTable: newUserDefinedTypesTableImpl("information_schema", "user_defined_types"),
		EXCLUDED:              newUserDefinedTypesTableImpl("", "excluded"),
	}
}

func newUserDefinedTypesTableImpl(schemaName, tableName string) userDefinedTypesTable {
	var (
		UserDefinedTypeCatalogColumn  = postgres.StringColumn("user_defined_type_catalog")
		UserDefinedTypeSchemaColumn   = postgres.StringColumn("user_defined_type_schema")
		UserDefinedTypeNameColumn     = postgres.StringColumn("user_defined_type_name")
		UserDefinedTypeCategoryColumn = postgres.StringColumn("user_defined_type_category")
		IsInstantiableColumn          = postgres.StringColumn("is_instantiable")
		IsFinalColumn                 = postgres.StringColumn("is_final")
		OrderingFormColumn            = postgres.StringColumn("ordering_form")
		OrderingCategoryColumn        = postgres.StringColumn("ordering_category")
		OrderingRoutineCatalogColumn  = postgres.StringColumn("ordering_routine_catalog")
		OrderingRoutineSchemaColumn   = postgres.StringColumn("ordering_routine_schema")
		OrderingRoutineNameColumn     = postgres.StringColumn("ordering_routine_name")
		ReferenceTypeColumn           = postgres.StringColumn("reference_type")
		DataTypeColumn                = postgres.StringColumn("data_type")
		CharacterMaximumLengthColumn  = postgres.IntegerColumn("character_maximum_length")
		CharacterOctetLengthColumn    = postgres.IntegerColumn("character_octet_length")
		CharacterSetCatalogColumn     = postgres.StringColumn("character_set_catalog")
		CharacterSetSchemaColumn      = postgres.StringColumn("character_set_schema")
		CharacterSetNameColumn        = postgres.StringColumn("character_set_name")
		CollationCatalogColumn        = postgres.StringColumn("collation_catalog")
		CollationSchemaColumn         = postgres.StringColumn("collation_schema")
		CollationNameColumn           = postgres.StringColumn("collation_name")
		NumericPrecisionColumn        = postgres.IntegerColumn("numeric_precision")
		NumericPrecisionRadixColumn   = postgres.IntegerColumn("numeric_precision_radix")
		NumericScaleColumn            = postgres.IntegerColumn("numeric_scale")
		DatetimePrecisionColumn       = postgres.IntegerColumn("datetime_precision")
		IntervalTypeColumn            = postgres.StringColumn("interval_type")
		IntervalPrecisionColumn       = postgres.IntegerColumn("interval_precision")
		SourceDtdIdentifierColumn     = postgres.StringColumn("source_dtd_identifier")
		RefDtdIdentifierColumn        = postgres.StringColumn("ref_dtd_identifier")
		allColumns                    = postgres.ColumnList{UserDefinedTypeCatalogColumn, UserDefinedTypeSchemaColumn, UserDefinedTypeNameColumn, UserDefinedTypeCategoryColumn, IsInstantiableColumn, IsFinalColumn, OrderingFormColumn, OrderingCategoryColumn, OrderingRoutineCatalogColumn, OrderingRoutineSchemaColumn, OrderingRoutineNameColumn, ReferenceTypeColumn, DataTypeColumn, CharacterMaximumLengthColumn, CharacterOctetLengthColumn, CharacterSetCatalogColumn, CharacterSetSchemaColumn, CharacterSetNameColumn, CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, NumericPrecisionColumn, NumericPrecisionRadixColumn, NumericScaleColumn, DatetimePrecisionColumn, IntervalTypeColumn, IntervalPrecisionColumn, SourceDtdIdentifierColumn, RefDtdIdentifierColumn}
		mutableColumns                = postgres.ColumnList{UserDefinedTypeCatalogColumn, UserDefinedTypeSchemaColumn, UserDefinedTypeNameColumn, UserDefinedTypeCategoryColumn, IsInstantiableColumn, IsFinalColumn, OrderingFormColumn, OrderingCategoryColumn, OrderingRoutineCatalogColumn, OrderingRoutineSchemaColumn, OrderingRoutineNameColumn, ReferenceTypeColumn, DataTypeColumn, CharacterMaximumLengthColumn, CharacterOctetLengthColumn, CharacterSetCatalogColumn, CharacterSetSchemaColumn, CharacterSetNameColumn, CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, NumericPrecisionColumn, NumericPrecisionRadixColumn, NumericScaleColumn, DatetimePrecisionColumn, IntervalTypeColumn, IntervalPrecisionColumn, SourceDtdIdentifierColumn, RefDtdIdentifierColumn}
	)

	return userDefinedTypesTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		UserDefinedTypeCatalog:  UserDefinedTypeCatalogColumn,
		UserDefinedTypeSchema:   UserDefinedTypeSchemaColumn,
		UserDefinedTypeName:     UserDefinedTypeNameColumn,
		UserDefinedTypeCategory: UserDefinedTypeCategoryColumn,
		IsInstantiable:          IsInstantiableColumn,
		IsFinal:                 IsFinalColumn,
		OrderingForm:            OrderingFormColumn,
		OrderingCategory:        OrderingCategoryColumn,
		OrderingRoutineCatalog:  OrderingRoutineCatalogColumn,
		OrderingRoutineSchema:   OrderingRoutineSchemaColumn,
		OrderingRoutineName:     OrderingRoutineNameColumn,
		ReferenceType:           ReferenceTypeColumn,
		DataType:                DataTypeColumn,
		CharacterMaximumLength:  CharacterMaximumLengthColumn,
		CharacterOctetLength:    CharacterOctetLengthColumn,
		CharacterSetCatalog:     CharacterSetCatalogColumn,
		CharacterSetSchema:      CharacterSetSchemaColumn,
		CharacterSetName:        CharacterSetNameColumn,
		CollationCatalog:        CollationCatalogColumn,
		CollationSchema:         CollationSchemaColumn,
		CollationName:           CollationNameColumn,
		NumericPrecision:        NumericPrecisionColumn,
		NumericPrecisionRadix:   NumericPrecisionRadixColumn,
		NumericScale:            NumericScaleColumn,
		DatetimePrecision:       DatetimePrecisionColumn,
		IntervalType:            IntervalTypeColumn,
		IntervalPrecision:       IntervalPrecisionColumn,
		SourceDtdIdentifier:     SourceDtdIdentifierColumn,
		RefDtdIdentifier:        RefDtdIdentifierColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
