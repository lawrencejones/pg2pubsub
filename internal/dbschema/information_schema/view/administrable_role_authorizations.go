//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AdministrableRoleAuthorizations = newAdministrableRoleAuthorizationsTable()

type administrableRoleAuthorizationsTable struct {
	postgres.Table

	//Columns
	Grantee     postgres.ColumnString
	RoleName    postgres.ColumnString
	IsGrantable postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AdministrableRoleAuthorizationsTable struct {
	administrableRoleAuthorizationsTable

	EXCLUDED administrableRoleAuthorizationsTable
}

// AS creates new AdministrableRoleAuthorizationsTable with assigned alias
func (a *AdministrableRoleAuthorizationsTable) AS(alias string) *AdministrableRoleAuthorizationsTable {
	aliasTable := newAdministrableRoleAuthorizationsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newAdministrableRoleAuthorizationsTable() *AdministrableRoleAuthorizationsTable {
	return &AdministrableRoleAuthorizationsTable{
		administrableRoleAuthorizationsTable: newAdministrableRoleAuthorizationsTableImpl("information_schema", "administrable_role_authorizations"),
		EXCLUDED:                             newAdministrableRoleAuthorizationsTableImpl("", "excluded"),
	}
}

func newAdministrableRoleAuthorizationsTableImpl(schemaName, tableName string) administrableRoleAuthorizationsTable {
	var (
		GranteeColumn     = postgres.StringColumn("grantee")
		RoleNameColumn    = postgres.StringColumn("role_name")
		IsGrantableColumn = postgres.StringColumn("is_grantable")
		allColumns        = postgres.ColumnList{GranteeColumn, RoleNameColumn, IsGrantableColumn}
		mutableColumns    = postgres.ColumnList{GranteeColumn, RoleNameColumn, IsGrantableColumn}
	)

	return administrableRoleAuthorizationsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Grantee:     GranteeColumn,
		RoleName:    RoleNameColumn,
		IsGrantable: IsGrantableColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
