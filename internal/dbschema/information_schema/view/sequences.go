//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Sequences = newSequencesTable()

type sequencesTable struct {
	postgres.Table

	//Columns
	SequenceCatalog       postgres.ColumnString
	SequenceSchema        postgres.ColumnString
	SequenceName          postgres.ColumnString
	DataType              postgres.ColumnString
	NumericPrecision      postgres.ColumnInteger
	NumericPrecisionRadix postgres.ColumnInteger
	NumericScale          postgres.ColumnInteger
	StartValue            postgres.ColumnString
	MinimumValue          postgres.ColumnString
	MaximumValue          postgres.ColumnString
	Increment             postgres.ColumnString
	CycleOption           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SequencesTable struct {
	sequencesTable

	EXCLUDED sequencesTable
}

// AS creates new SequencesTable with assigned alias
func (a *SequencesTable) AS(alias string) *SequencesTable {
	aliasTable := newSequencesTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newSequencesTable() *SequencesTable {
	return &SequencesTable{
		sequencesTable: newSequencesTableImpl("information_schema", "sequences"),
		EXCLUDED:       newSequencesTableImpl("", "excluded"),
	}
}

func newSequencesTableImpl(schemaName, tableName string) sequencesTable {
	var (
		SequenceCatalogColumn       = postgres.StringColumn("sequence_catalog")
		SequenceSchemaColumn        = postgres.StringColumn("sequence_schema")
		SequenceNameColumn          = postgres.StringColumn("sequence_name")
		DataTypeColumn              = postgres.StringColumn("data_type")
		NumericPrecisionColumn      = postgres.IntegerColumn("numeric_precision")
		NumericPrecisionRadixColumn = postgres.IntegerColumn("numeric_precision_radix")
		NumericScaleColumn          = postgres.IntegerColumn("numeric_scale")
		StartValueColumn            = postgres.StringColumn("start_value")
		MinimumValueColumn          = postgres.StringColumn("minimum_value")
		MaximumValueColumn          = postgres.StringColumn("maximum_value")
		IncrementColumn             = postgres.StringColumn("increment")
		CycleOptionColumn           = postgres.StringColumn("cycle_option")
		allColumns                  = postgres.ColumnList{SequenceCatalogColumn, SequenceSchemaColumn, SequenceNameColumn, DataTypeColumn, NumericPrecisionColumn, NumericPrecisionRadixColumn, NumericScaleColumn, StartValueColumn, MinimumValueColumn, MaximumValueColumn, IncrementColumn, CycleOptionColumn}
		mutableColumns              = postgres.ColumnList{SequenceCatalogColumn, SequenceSchemaColumn, SequenceNameColumn, DataTypeColumn, NumericPrecisionColumn, NumericPrecisionRadixColumn, NumericScaleColumn, StartValueColumn, MinimumValueColumn, MaximumValueColumn, IncrementColumn, CycleOptionColumn}
	)

	return sequencesTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		SequenceCatalog:       SequenceCatalogColumn,
		SequenceSchema:        SequenceSchemaColumn,
		SequenceName:          SequenceNameColumn,
		DataType:              DataTypeColumn,
		NumericPrecision:      NumericPrecisionColumn,
		NumericPrecisionRadix: NumericPrecisionRadixColumn,
		NumericScale:          NumericScaleColumn,
		StartValue:            StartValueColumn,
		MinimumValue:          MinimumValueColumn,
		MaximumValue:          MaximumValueColumn,
		Increment:             IncrementColumn,
		CycleOption:           CycleOptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
