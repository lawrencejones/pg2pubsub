//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ApplicableRoles = newApplicableRolesTable()

type applicableRolesTable struct {
	postgres.Table

	//Columns
	Grantee     postgres.ColumnString
	RoleName    postgres.ColumnString
	IsGrantable postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ApplicableRolesTable struct {
	applicableRolesTable

	EXCLUDED applicableRolesTable
}

// AS creates new ApplicableRolesTable with assigned alias
func (a *ApplicableRolesTable) AS(alias string) *ApplicableRolesTable {
	aliasTable := newApplicableRolesTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newApplicableRolesTable() *ApplicableRolesTable {
	return &ApplicableRolesTable{
		applicableRolesTable: newApplicableRolesTableImpl("information_schema", "applicable_roles"),
		EXCLUDED:             newApplicableRolesTableImpl("", "excluded"),
	}
}

func newApplicableRolesTableImpl(schemaName, tableName string) applicableRolesTable {
	var (
		GranteeColumn     = postgres.StringColumn("grantee")
		RoleNameColumn    = postgres.StringColumn("role_name")
		IsGrantableColumn = postgres.StringColumn("is_grantable")
		allColumns        = postgres.ColumnList{GranteeColumn, RoleNameColumn, IsGrantableColumn}
		mutableColumns    = postgres.ColumnList{GranteeColumn, RoleNameColumn, IsGrantableColumn}
	)

	return applicableRolesTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Grantee:     GranteeColumn,
		RoleName:    RoleNameColumn,
		IsGrantable: IsGrantableColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
