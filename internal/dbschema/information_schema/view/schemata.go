//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Schemata = newSchemataTable()

type schemataTable struct {
	postgres.Table

	//Columns
	CatalogName                postgres.ColumnString
	SchemaName                 postgres.ColumnString
	SchemaOwner                postgres.ColumnString
	DefaultCharacterSetCatalog postgres.ColumnString
	DefaultCharacterSetSchema  postgres.ColumnString
	DefaultCharacterSetName    postgres.ColumnString
	SQLPath                    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SchemataTable struct {
	schemataTable

	EXCLUDED schemataTable
}

// AS creates new SchemataTable with assigned alias
func (a *SchemataTable) AS(alias string) *SchemataTable {
	aliasTable := newSchemataTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newSchemataTable() *SchemataTable {
	return &SchemataTable{
		schemataTable: newSchemataTableImpl("information_schema", "schemata"),
		EXCLUDED:      newSchemataTableImpl("", "excluded"),
	}
}

func newSchemataTableImpl(schemaName, tableName string) schemataTable {
	var (
		CatalogNameColumn                = postgres.StringColumn("catalog_name")
		SchemaNameColumn                 = postgres.StringColumn("schema_name")
		SchemaOwnerColumn                = postgres.StringColumn("schema_owner")
		DefaultCharacterSetCatalogColumn = postgres.StringColumn("default_character_set_catalog")
		DefaultCharacterSetSchemaColumn  = postgres.StringColumn("default_character_set_schema")
		DefaultCharacterSetNameColumn    = postgres.StringColumn("default_character_set_name")
		SQLPathColumn                    = postgres.StringColumn("sql_path")
		allColumns                       = postgres.ColumnList{CatalogNameColumn, SchemaNameColumn, SchemaOwnerColumn, DefaultCharacterSetCatalogColumn, DefaultCharacterSetSchemaColumn, DefaultCharacterSetNameColumn, SQLPathColumn}
		mutableColumns                   = postgres.ColumnList{CatalogNameColumn, SchemaNameColumn, SchemaOwnerColumn, DefaultCharacterSetCatalogColumn, DefaultCharacterSetSchemaColumn, DefaultCharacterSetNameColumn, SQLPathColumn}
	)

	return schemataTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		CatalogName:                CatalogNameColumn,
		SchemaName:                 SchemaNameColumn,
		SchemaOwner:                SchemaOwnerColumn,
		DefaultCharacterSetCatalog: DefaultCharacterSetCatalogColumn,
		DefaultCharacterSetSchema:  DefaultCharacterSetSchemaColumn,
		DefaultCharacterSetName:    DefaultCharacterSetNameColumn,
		SQLPath:                    SQLPathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
