//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ForeignDataWrappers = newForeignDataWrappersTable()

type foreignDataWrappersTable struct {
	postgres.Table

	//Columns
	ForeignDataWrapperCatalog  postgres.ColumnString
	ForeignDataWrapperName     postgres.ColumnString
	AuthorizationIdentifier    postgres.ColumnString
	LibraryName                postgres.ColumnString
	ForeignDataWrapperLanguage postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ForeignDataWrappersTable struct {
	foreignDataWrappersTable

	EXCLUDED foreignDataWrappersTable
}

// AS creates new ForeignDataWrappersTable with assigned alias
func (a *ForeignDataWrappersTable) AS(alias string) *ForeignDataWrappersTable {
	aliasTable := newForeignDataWrappersTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newForeignDataWrappersTable() *ForeignDataWrappersTable {
	return &ForeignDataWrappersTable{
		foreignDataWrappersTable: newForeignDataWrappersTableImpl("information_schema", "foreign_data_wrappers"),
		EXCLUDED:                 newForeignDataWrappersTableImpl("", "excluded"),
	}
}

func newForeignDataWrappersTableImpl(schemaName, tableName string) foreignDataWrappersTable {
	var (
		ForeignDataWrapperCatalogColumn  = postgres.StringColumn("foreign_data_wrapper_catalog")
		ForeignDataWrapperNameColumn     = postgres.StringColumn("foreign_data_wrapper_name")
		AuthorizationIdentifierColumn    = postgres.StringColumn("authorization_identifier")
		LibraryNameColumn                = postgres.StringColumn("library_name")
		ForeignDataWrapperLanguageColumn = postgres.StringColumn("foreign_data_wrapper_language")
		allColumns                       = postgres.ColumnList{ForeignDataWrapperCatalogColumn, ForeignDataWrapperNameColumn, AuthorizationIdentifierColumn, LibraryNameColumn, ForeignDataWrapperLanguageColumn}
		mutableColumns                   = postgres.ColumnList{ForeignDataWrapperCatalogColumn, ForeignDataWrapperNameColumn, AuthorizationIdentifierColumn, LibraryNameColumn, ForeignDataWrapperLanguageColumn}
	)

	return foreignDataWrappersTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ForeignDataWrapperCatalog:  ForeignDataWrapperCatalogColumn,
		ForeignDataWrapperName:     ForeignDataWrapperNameColumn,
		AuthorizationIdentifier:    AuthorizationIdentifierColumn,
		LibraryName:                LibraryNameColumn,
		ForeignDataWrapperLanguage: ForeignDataWrapperLanguageColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
