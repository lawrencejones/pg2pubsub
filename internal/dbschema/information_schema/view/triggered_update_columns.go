//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TriggeredUpdateColumns = newTriggeredUpdateColumnsTable()

type triggeredUpdateColumnsTable struct {
	postgres.Table

	//Columns
	TriggerCatalog     postgres.ColumnString
	TriggerSchema      postgres.ColumnString
	TriggerName        postgres.ColumnString
	EventObjectCatalog postgres.ColumnString
	EventObjectSchema  postgres.ColumnString
	EventObjectTable   postgres.ColumnString
	EventObjectColumn  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TriggeredUpdateColumnsTable struct {
	triggeredUpdateColumnsTable

	EXCLUDED triggeredUpdateColumnsTable
}

// AS creates new TriggeredUpdateColumnsTable with assigned alias
func (a *TriggeredUpdateColumnsTable) AS(alias string) *TriggeredUpdateColumnsTable {
	aliasTable := newTriggeredUpdateColumnsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newTriggeredUpdateColumnsTable() *TriggeredUpdateColumnsTable {
	return &TriggeredUpdateColumnsTable{
		triggeredUpdateColumnsTable: newTriggeredUpdateColumnsTableImpl("information_schema", "triggered_update_columns"),
		EXCLUDED:                    newTriggeredUpdateColumnsTableImpl("", "excluded"),
	}
}

func newTriggeredUpdateColumnsTableImpl(schemaName, tableName string) triggeredUpdateColumnsTable {
	var (
		TriggerCatalogColumn     = postgres.StringColumn("trigger_catalog")
		TriggerSchemaColumn      = postgres.StringColumn("trigger_schema")
		TriggerNameColumn        = postgres.StringColumn("trigger_name")
		EventObjectCatalogColumn = postgres.StringColumn("event_object_catalog")
		EventObjectSchemaColumn  = postgres.StringColumn("event_object_schema")
		EventObjectTableColumn   = postgres.StringColumn("event_object_table")
		EventObjectColumnColumn  = postgres.StringColumn("event_object_column")
		allColumns               = postgres.ColumnList{TriggerCatalogColumn, TriggerSchemaColumn, TriggerNameColumn, EventObjectCatalogColumn, EventObjectSchemaColumn, EventObjectTableColumn, EventObjectColumnColumn}
		mutableColumns           = postgres.ColumnList{TriggerCatalogColumn, TriggerSchemaColumn, TriggerNameColumn, EventObjectCatalogColumn, EventObjectSchemaColumn, EventObjectTableColumn, EventObjectColumnColumn}
	)

	return triggeredUpdateColumnsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		TriggerCatalog:     TriggerCatalogColumn,
		TriggerSchema:      TriggerSchemaColumn,
		TriggerName:        TriggerNameColumn,
		EventObjectCatalog: EventObjectCatalogColumn,
		EventObjectSchema:  EventObjectSchemaColumn,
		EventObjectTable:   EventObjectTableColumn,
		EventObjectColumn:  EventObjectColumnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
