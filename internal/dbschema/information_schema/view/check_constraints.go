//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CheckConstraints = newCheckConstraintsTable()

type checkConstraintsTable struct {
	postgres.Table

	//Columns
	ConstraintCatalog postgres.ColumnString
	ConstraintSchema  postgres.ColumnString
	ConstraintName    postgres.ColumnString
	CheckClause       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CheckConstraintsTable struct {
	checkConstraintsTable

	EXCLUDED checkConstraintsTable
}

// AS creates new CheckConstraintsTable with assigned alias
func (a *CheckConstraintsTable) AS(alias string) *CheckConstraintsTable {
	aliasTable := newCheckConstraintsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newCheckConstraintsTable() *CheckConstraintsTable {
	return &CheckConstraintsTable{
		checkConstraintsTable: newCheckConstraintsTableImpl("information_schema", "check_constraints"),
		EXCLUDED:              newCheckConstraintsTableImpl("", "excluded"),
	}
}

func newCheckConstraintsTableImpl(schemaName, tableName string) checkConstraintsTable {
	var (
		ConstraintCatalogColumn = postgres.StringColumn("constraint_catalog")
		ConstraintSchemaColumn  = postgres.StringColumn("constraint_schema")
		ConstraintNameColumn    = postgres.StringColumn("constraint_name")
		CheckClauseColumn       = postgres.StringColumn("check_clause")
		allColumns              = postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, CheckClauseColumn}
		mutableColumns          = postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, CheckClauseColumn}
	)

	return checkConstraintsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ConstraintCatalog: ConstraintCatalogColumn,
		ConstraintSchema:  ConstraintSchemaColumn,
		ConstraintName:    ConstraintNameColumn,
		CheckClause:       CheckClauseColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
