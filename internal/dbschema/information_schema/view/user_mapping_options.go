//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserMappingOptions = newUserMappingOptionsTable()

type userMappingOptionsTable struct {
	postgres.Table

	//Columns
	AuthorizationIdentifier postgres.ColumnString
	ForeignServerCatalog    postgres.ColumnString
	ForeignServerName       postgres.ColumnString
	OptionName              postgres.ColumnString
	OptionValue             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserMappingOptionsTable struct {
	userMappingOptionsTable

	EXCLUDED userMappingOptionsTable
}

// AS creates new UserMappingOptionsTable with assigned alias
func (a *UserMappingOptionsTable) AS(alias string) *UserMappingOptionsTable {
	aliasTable := newUserMappingOptionsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newUserMappingOptionsTable() *UserMappingOptionsTable {
	return &UserMappingOptionsTable{
		userMappingOptionsTable: newUserMappingOptionsTableImpl("information_schema", "user_mapping_options"),
		EXCLUDED:                newUserMappingOptionsTableImpl("", "excluded"),
	}
}

func newUserMappingOptionsTableImpl(schemaName, tableName string) userMappingOptionsTable {
	var (
		AuthorizationIdentifierColumn = postgres.StringColumn("authorization_identifier")
		ForeignServerCatalogColumn    = postgres.StringColumn("foreign_server_catalog")
		ForeignServerNameColumn       = postgres.StringColumn("foreign_server_name")
		OptionNameColumn              = postgres.StringColumn("option_name")
		OptionValueColumn             = postgres.StringColumn("option_value")
		allColumns                    = postgres.ColumnList{AuthorizationIdentifierColumn, ForeignServerCatalogColumn, ForeignServerNameColumn, OptionNameColumn, OptionValueColumn}
		mutableColumns                = postgres.ColumnList{AuthorizationIdentifierColumn, ForeignServerCatalogColumn, ForeignServerNameColumn, OptionNameColumn, OptionValueColumn}
	)

	return userMappingOptionsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		AuthorizationIdentifier: AuthorizationIdentifierColumn,
		ForeignServerCatalog:    ForeignServerCatalogColumn,
		ForeignServerName:       ForeignServerNameColumn,
		OptionName:              OptionNameColumn,
		OptionValue:             OptionValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
