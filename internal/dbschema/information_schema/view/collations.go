//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Collations = newCollationsTable()

type collationsTable struct {
	postgres.Table

	//Columns
	CollationCatalog postgres.ColumnString
	CollationSchema  postgres.ColumnString
	CollationName    postgres.ColumnString
	PadAttribute     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollationsTable struct {
	collationsTable

	EXCLUDED collationsTable
}

// AS creates new CollationsTable with assigned alias
func (a *CollationsTable) AS(alias string) *CollationsTable {
	aliasTable := newCollationsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newCollationsTable() *CollationsTable {
	return &CollationsTable{
		collationsTable: newCollationsTableImpl("information_schema", "collations"),
		EXCLUDED:        newCollationsTableImpl("", "excluded"),
	}
}

func newCollationsTableImpl(schemaName, tableName string) collationsTable {
	var (
		CollationCatalogColumn = postgres.StringColumn("collation_catalog")
		CollationSchemaColumn  = postgres.StringColumn("collation_schema")
		CollationNameColumn    = postgres.StringColumn("collation_name")
		PadAttributeColumn     = postgres.StringColumn("pad_attribute")
		allColumns             = postgres.ColumnList{CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, PadAttributeColumn}
		mutableColumns         = postgres.ColumnList{CollationCatalogColumn, CollationSchemaColumn, CollationNameColumn, PadAttributeColumn}
	)

	return collationsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		CollationCatalog: CollationCatalogColumn,
		CollationSchema:  CollationSchemaColumn,
		CollationName:    CollationNameColumn,
		PadAttribute:     PadAttributeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
