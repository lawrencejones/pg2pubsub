//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Triggers = newTriggersTable()

type triggersTable struct {
	postgres.Table

	//Columns
	TriggerCatalog          postgres.ColumnString
	TriggerSchema           postgres.ColumnString
	TriggerName             postgres.ColumnString
	EventManipulation       postgres.ColumnString
	EventObjectCatalog      postgres.ColumnString
	EventObjectSchema       postgres.ColumnString
	EventObjectTable        postgres.ColumnString
	ActionOrder             postgres.ColumnInteger
	ActionCondition         postgres.ColumnString
	ActionStatement         postgres.ColumnString
	ActionOrientation       postgres.ColumnString
	ActionTiming            postgres.ColumnString
	ActionReferenceOldTable postgres.ColumnString
	ActionReferenceNewTable postgres.ColumnString
	ActionReferenceOldRow   postgres.ColumnString
	ActionReferenceNewRow   postgres.ColumnString
	Created                 postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TriggersTable struct {
	triggersTable

	EXCLUDED triggersTable
}

// AS creates new TriggersTable with assigned alias
func (a *TriggersTable) AS(alias string) *TriggersTable {
	aliasTable := newTriggersTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newTriggersTable() *TriggersTable {
	return &TriggersTable{
		triggersTable: newTriggersTableImpl("information_schema", "triggers"),
		EXCLUDED:      newTriggersTableImpl("", "excluded"),
	}
}

func newTriggersTableImpl(schemaName, tableName string) triggersTable {
	var (
		TriggerCatalogColumn          = postgres.StringColumn("trigger_catalog")
		TriggerSchemaColumn           = postgres.StringColumn("trigger_schema")
		TriggerNameColumn             = postgres.StringColumn("trigger_name")
		EventManipulationColumn       = postgres.StringColumn("event_manipulation")
		EventObjectCatalogColumn      = postgres.StringColumn("event_object_catalog")
		EventObjectSchemaColumn       = postgres.StringColumn("event_object_schema")
		EventObjectTableColumn        = postgres.StringColumn("event_object_table")
		ActionOrderColumn             = postgres.IntegerColumn("action_order")
		ActionConditionColumn         = postgres.StringColumn("action_condition")
		ActionStatementColumn         = postgres.StringColumn("action_statement")
		ActionOrientationColumn       = postgres.StringColumn("action_orientation")
		ActionTimingColumn            = postgres.StringColumn("action_timing")
		ActionReferenceOldTableColumn = postgres.StringColumn("action_reference_old_table")
		ActionReferenceNewTableColumn = postgres.StringColumn("action_reference_new_table")
		ActionReferenceOldRowColumn   = postgres.StringColumn("action_reference_old_row")
		ActionReferenceNewRowColumn   = postgres.StringColumn("action_reference_new_row")
		CreatedColumn                 = postgres.TimestampzColumn("created")
		allColumns                    = postgres.ColumnList{TriggerCatalogColumn, TriggerSchemaColumn, TriggerNameColumn, EventManipulationColumn, EventObjectCatalogColumn, EventObjectSchemaColumn, EventObjectTableColumn, ActionOrderColumn, ActionConditionColumn, ActionStatementColumn, ActionOrientationColumn, ActionTimingColumn, ActionReferenceOldTableColumn, ActionReferenceNewTableColumn, ActionReferenceOldRowColumn, ActionReferenceNewRowColumn, CreatedColumn}
		mutableColumns                = postgres.ColumnList{TriggerCatalogColumn, TriggerSchemaColumn, TriggerNameColumn, EventManipulationColumn, EventObjectCatalogColumn, EventObjectSchemaColumn, EventObjectTableColumn, ActionOrderColumn, ActionConditionColumn, ActionStatementColumn, ActionOrientationColumn, ActionTimingColumn, ActionReferenceOldTableColumn, ActionReferenceNewTableColumn, ActionReferenceOldRowColumn, ActionReferenceNewRowColumn, CreatedColumn}
	)

	return triggersTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		TriggerCatalog:          TriggerCatalogColumn,
		TriggerSchema:           TriggerSchemaColumn,
		TriggerName:             TriggerNameColumn,
		EventManipulation:       EventManipulationColumn,
		EventObjectCatalog:      EventObjectCatalogColumn,
		EventObjectSchema:       EventObjectSchemaColumn,
		EventObjectTable:        EventObjectTableColumn,
		ActionOrder:             ActionOrderColumn,
		ActionCondition:         ActionConditionColumn,
		ActionStatement:         ActionStatementColumn,
		ActionOrientation:       ActionOrientationColumn,
		ActionTiming:            ActionTimingColumn,
		ActionReferenceOldTable: ActionReferenceOldTableColumn,
		ActionReferenceNewTable: ActionReferenceNewTableColumn,
		ActionReferenceOldRow:   ActionReferenceOldRowColumn,
		ActionReferenceNewRow:   ActionReferenceNewRowColumn,
		Created:                 CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
