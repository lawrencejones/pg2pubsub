//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ForeignServers = newForeignServersTable()

type foreignServersTable struct {
	postgres.Table

	//Columns
	ForeignServerCatalog      postgres.ColumnString
	ForeignServerName         postgres.ColumnString
	ForeignDataWrapperCatalog postgres.ColumnString
	ForeignDataWrapperName    postgres.ColumnString
	ForeignServerType         postgres.ColumnString
	ForeignServerVersion      postgres.ColumnString
	AuthorizationIdentifier   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ForeignServersTable struct {
	foreignServersTable

	EXCLUDED foreignServersTable
}

// AS creates new ForeignServersTable with assigned alias
func (a *ForeignServersTable) AS(alias string) *ForeignServersTable {
	aliasTable := newForeignServersTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newForeignServersTable() *ForeignServersTable {
	return &ForeignServersTable{
		foreignServersTable: newForeignServersTableImpl("information_schema", "foreign_servers"),
		EXCLUDED:            newForeignServersTableImpl("", "excluded"),
	}
}

func newForeignServersTableImpl(schemaName, tableName string) foreignServersTable {
	var (
		ForeignServerCatalogColumn      = postgres.StringColumn("foreign_server_catalog")
		ForeignServerNameColumn         = postgres.StringColumn("foreign_server_name")
		ForeignDataWrapperCatalogColumn = postgres.StringColumn("foreign_data_wrapper_catalog")
		ForeignDataWrapperNameColumn    = postgres.StringColumn("foreign_data_wrapper_name")
		ForeignServerTypeColumn         = postgres.StringColumn("foreign_server_type")
		ForeignServerVersionColumn      = postgres.StringColumn("foreign_server_version")
		AuthorizationIdentifierColumn   = postgres.StringColumn("authorization_identifier")
		allColumns                      = postgres.ColumnList{ForeignServerCatalogColumn, ForeignServerNameColumn, ForeignDataWrapperCatalogColumn, ForeignDataWrapperNameColumn, ForeignServerTypeColumn, ForeignServerVersionColumn, AuthorizationIdentifierColumn}
		mutableColumns                  = postgres.ColumnList{ForeignServerCatalogColumn, ForeignServerNameColumn, ForeignDataWrapperCatalogColumn, ForeignDataWrapperNameColumn, ForeignServerTypeColumn, ForeignServerVersionColumn, AuthorizationIdentifierColumn}
	)

	return foreignServersTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ForeignServerCatalog:      ForeignServerCatalogColumn,
		ForeignServerName:         ForeignServerNameColumn,
		ForeignDataWrapperCatalog: ForeignDataWrapperCatalogColumn,
		ForeignDataWrapperName:    ForeignDataWrapperNameColumn,
		ForeignServerType:         ForeignServerTypeColumn,
		ForeignServerVersion:      ForeignServerVersionColumn,
		AuthorizationIdentifier:   AuthorizationIdentifierColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
