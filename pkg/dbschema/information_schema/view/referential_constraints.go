//
// Code generated by go-jet DO NOT EDIT.
// Generated at Tuesday, 12-May-20 09:15:06 BST
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/postgres"
)

var ReferentialConstraints = newReferentialConstraintsTable()

type ReferentialConstraintsTable struct {
	postgres.Table

	//Columns
	ConstraintCatalog       postgres.ColumnString
	ConstraintSchema        postgres.ColumnString
	ConstraintName          postgres.ColumnString
	UniqueConstraintCatalog postgres.ColumnString
	UniqueConstraintSchema  postgres.ColumnString
	UniqueConstraintName    postgres.ColumnString
	MatchOption             postgres.ColumnString
	UpdateRule              postgres.ColumnString
	DeleteRule              postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

// creates new ReferentialConstraintsTable with assigned alias
func (a *ReferentialConstraintsTable) AS(alias string) *ReferentialConstraintsTable {
	aliasTable := newReferentialConstraintsTable()

	aliasTable.Table.AS(alias)

	return aliasTable
}

func newReferentialConstraintsTable() *ReferentialConstraintsTable {
	var (
		ConstraintCatalogColumn       = postgres.StringColumn("constraint_catalog")
		ConstraintSchemaColumn        = postgres.StringColumn("constraint_schema")
		ConstraintNameColumn          = postgres.StringColumn("constraint_name")
		UniqueConstraintCatalogColumn = postgres.StringColumn("unique_constraint_catalog")
		UniqueConstraintSchemaColumn  = postgres.StringColumn("unique_constraint_schema")
		UniqueConstraintNameColumn    = postgres.StringColumn("unique_constraint_name")
		MatchOptionColumn             = postgres.StringColumn("match_option")
		UpdateRuleColumn              = postgres.StringColumn("update_rule")
		DeleteRuleColumn              = postgres.StringColumn("delete_rule")
	)

	return &ReferentialConstraintsTable{
		Table: postgres.NewTable("information_schema", "referential_constraints", ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, UniqueConstraintCatalogColumn, UniqueConstraintSchemaColumn, UniqueConstraintNameColumn, MatchOptionColumn, UpdateRuleColumn, DeleteRuleColumn),

		//Columns
		ConstraintCatalog:       ConstraintCatalogColumn,
		ConstraintSchema:        ConstraintSchemaColumn,
		ConstraintName:          ConstraintNameColumn,
		UniqueConstraintCatalog: UniqueConstraintCatalogColumn,
		UniqueConstraintSchema:  UniqueConstraintSchemaColumn,
		UniqueConstraintName:    UniqueConstraintNameColumn,
		MatchOption:             MatchOptionColumn,
		UpdateRule:              UpdateRuleColumn,
		DeleteRule:              DeleteRuleColumn,

		AllColumns:     postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, UniqueConstraintCatalogColumn, UniqueConstraintSchemaColumn, UniqueConstraintNameColumn, MatchOptionColumn, UpdateRuleColumn, DeleteRuleColumn},
		MutableColumns: postgres.ColumnList{ConstraintCatalogColumn, ConstraintSchemaColumn, ConstraintNameColumn, UniqueConstraintCatalogColumn, UniqueConstraintSchemaColumn, UniqueConstraintNameColumn, MatchOptionColumn, UpdateRuleColumn, DeleteRuleColumn},
	}
}
