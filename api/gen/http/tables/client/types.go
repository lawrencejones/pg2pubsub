// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Tables HTTP client types
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package client

import (
	tables "github.com/lawrencejones/pgsink/api/gen/tables"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "Tables" service "List" endpoint HTTP
// response body.
type ListResponseBody []*TableResponse

// TableResponse is used to define fields on response body types.
type TableResponse struct {
	// Postgres table schema
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// Postgres table name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// True if this table is already streaming
	Published *bool `form:"published,omitempty" json:"published,omitempty" xml:"published,omitempty"`
}

// NewListTableOK builds a "Tables" service "List" endpoint result from a HTTP
// "OK" response.
func NewListTableOK(body []*TableResponse) []*tables.Table {
	v := make([]*tables.Table, len(body))
	for i, val := range body {
		v[i] = unmarshalTableResponseToTablesTable(val)
	}
	return v
}

// ValidateTableResponse runs the validations defined on TableResponse
func ValidateTableResponse(body *TableResponse) (err error) {
	if body.Schema == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schema", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Published == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published", "body"))
	}
	return
}
